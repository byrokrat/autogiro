//<?php
/**
 * This file is part of byrokrat\autogiro.
 *
 * byrokrat\autogiro is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * byrokrat\autogiro is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with byrokrat\autogiro. If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2016-18 Hannes ForsgÃ¥rd
 */

namespace byrokrat\autogiro\Parser;

use byrokrat\autogiro\Layouts;
use byrokrat\autogiro\Tree\AccountNode;
use byrokrat\autogiro\Tree\AmountNode;
use byrokrat\autogiro\Tree\BankgiroNode;
use byrokrat\autogiro\Tree\BgcNumberNode;
use byrokrat\autogiro\Tree\ImmediateDateNode;
use byrokrat\autogiro\Tree\DateNode;
use byrokrat\autogiro\Tree\DateTimeNode;
use byrokrat\autogiro\Tree\FileNode;
use byrokrat\autogiro\Tree\IdNode;
use byrokrat\autogiro\Tree\IntervalNode;
use byrokrat\autogiro\Tree\MessageNode;
use byrokrat\autogiro\Tree\PayerNumberNode;
use byrokrat\autogiro\Tree\ReferredAccountNode;
use byrokrat\autogiro\Tree\RepetitionsNode;
use byrokrat\autogiro\Tree\Request;
use byrokrat\autogiro\Tree\Response;
use byrokrat\autogiro\Tree\TextNode;

grammar Grammar
{
    start FILE = RESET_LINE_COUNT file:(REQUEST_FILE / MANDATE_FILE / PAYMENT_FILE / PAYMENT_REJECTION_FILE / AMENDMENT_FILE) {
        return $file;
    };

    RESET_LINE_COUNT = '' {
        $this->lineNr = 0;
    };

    //
    // REQUEST LAYOUTS
    //

    REQUEST_FILE = sections:(REQ_MANDATE_SECTION / REQ_PAYMENT_SECTION / REQ_AMENDMENT_SECTION)+ {
        return new FileNode(Layouts::LAYOUT_REQUEST, ...$sections);
    };

    REQ_OPENING_REC = '01' date:DATE 'AUTOGIRO' S20 S20 S4 bgcNr:BGC_NR bg:BANKGIRO EOR {
        return new Request\RequestOpening(
            $this->lineNr,
            [
                'date' => $date,
                'payee_bgc_number' => $bgcNr,
                'payee_bankgiro' => $bg
            ]
        );
    };

    // MANDATE REQUESTS

    REQ_MANDATE_SECTION = open:REQ_OPENING_REC records:(REQ_DEL_MANDATE_REC / REQ_REJECT_MANDATE_REC / REQ_CREATE_MANDATE_REC / REQ_UPDATE_MANDATE_REC)+ {
        return new Request\MandateRequestSection($open, ...$records);
    };

    REQ_DEL_MANDATE_REC = '03' bg:BANKGIRO payerNr:PAYER_NR EOR {
        return new Request\DeleteMandateRequest($this->lineNr, ['payee_bankgiro' => $bg, 'payer_number' => $payerNr]);
    };

    REQ_REJECT_MANDATE_REC = '04' bg:BANKGIRO payerNr:PAYER_NR TXT48 'AV' EOR {
        return new Request\RejectDigitalMandateRequest($this->lineNr, ['payee_bankgiro' => $bg, 'payer_number' => $payerNr]);
    };

    REQ_CREATE_MANDATE_REC = '04' bg:BANKGIRO payerNr:PAYER_NR account:ACCOUNT16? id:ID? EOR {
        return $id && trim($id->getValue())
            ? new Request\CreateMandateRequest(
                $this->lineNr,
                [
                    'payee_bankgiro' => $bg,
                    'payer_number' => $payerNr,
                    'account' => $account,
                    'id' => $id
                ]
            )
            : new Request\AcceptDigitalMandateRequest(
                $this->lineNr,
                [
                    'payee_bankgiro' => $bg,
                    'payer_number' => $payerNr
                ]
            );
    };

    REQ_UPDATE_MANDATE_REC = '05' oldBg:BANKGIRO oldPayerNr:PAYER_NR newBg:BANKGIRO newPayerNr:PAYER_NR EOR {
        return new Request\UpdateMandateRequest(
            $this->lineNr,
            [
                'payee_bankgiro' => $oldBg,
                'payer_number' => $oldPayerNr,
                'new_payee_bankgiro' => $newBg,
                'new_payer_number' => $newPayerNr
            ]
        );
    };

    // PAYMENT REQUESTS

    REQ_PAYMENT_SECTION = open:REQ_OPENING_REC records:REQ_PAYMENT_REC+ {
        return new Request\PaymentRequestSection($open, ...$records);
    };

    REQ_PAYMENT_REC = type:(REQ_PAYMENT_INCOMING / REQ_PAYMENT_OUTGOING) date:(IMMEDIATE_DATE / DATE) ival:INTERVAL reps:REPS ' ' payerNr:PAYER_NR amount:AMOUNT12 bg:BANKGIRO ref:VAR_TXT EOR {
        return new $type(
            $this->lineNr,
            [
                'date' => $date,
                'interval' => $ival,
                'repetitions' => $reps,
                'payer_number' => $payerNr,
                'amount' => $amount,
                'payee_bankgiro' => $bg,
                'reference' => $ref
            ]
        );
    };

    REQ_PAYMENT_INCOMING = '82' {
        return Request\IncomingPaymentRequest::CLASS;
    };

    REQ_PAYMENT_OUTGOING = '32' {
        return Request\OutgoingPaymentRequest::CLASS;
    };

    // AMENDMENT REQUESTS

    REQ_AMENDMENT_SECTION = open:REQ_OPENING_REC records:('TODO')+ {
        return new Request\AmendmentRequestSection($open, ...$records);
    };

    //
    // PAYMENT RESPONSES
    //

    PAYMENT_FILE = NEW_PAYMENT_FILE / OLD_PAYMENT_FILE;

    NEW_PAYMENT_FILE = open:PAYMENT_OPENING_REC sections:(PAYMENT_INCOMING_SECTION / PAYMENT_OUTGOING_SECTION / PAYMENT_REFUND_SECTION)+ close:PAYMENT_CLOSING_REC {
        $sections[] = $close;
        return new FileNode(Layouts::LAYOUT_PAYMENT_RESPONSE, $open, ...$sections);
    };

    PAYMENT_OPENING_REC = '01' 'AUTOGIRO' S10 S4 datetime:DATETIME 'BET. SPEC & STOPP TK' ^ bgcNr:BGC_NR bg:BANKGIRO EOR {
        return new Response\ResponseOpening(
            $this->lineNr,
            [
                'date' => $datetime,
                'payee_bgc_number' => $bgcNr,
                'payee_bankgiro' => $bg,
            ]
        );
    };

    PAYMENT_CLOSING_REC = '09' date:DATE '9900' nrInSecs:INT6 nrInRecs:INT12 nrOutSecs:INT6 nrOutRecs:INT12 nrRefSecs:INT6 nrRefRecs:INT12 EOR {
        return new Response\PaymentResponseClosing(
            $this->lineNr,
            [
                'date' => $date,
                'nr_of_incoming_sections' => $nrInSecs,
                'nr_of_incoming_records' => $nrInRecs,
                'nr_of_outgoing_sections' => $nrOutSecs,
                'nr_of_outgoing_records' => $nrOutRecs,
                'nr_of_refund_sections' => $nrRefSecs,
                'nr_of_refund_records' => $nrRefRecs,
            ]
        );
    };

    // INCOMING PAYMENTS

    PAYMENT_INCOMING_SECTION = open:PAYMENT_INCOMING_OPENING records:(PAYMENT_INCOMING_REC)* {
        return new Response\IncomingPaymentResponseSection($open, ...$records);
    };

    PAYMENT_INCOMING_OPENING = '15' account:ACCOUNT35 date:DATE serial:INT5 amount:AMOUNT18 A2 A nrRecs:INT8 EOR {
        return new Response\IncomingPaymentResponseOpening(
            $this->lineNr,
            [
                'account' => $account,
                'date' => $date,
                'serial' => $serial,
                'amount' => $amount,
                'record_count' => $nrRecs,
            ]
        );
    };

    PAYMENT_INCOMING_REC = '82' date:DATE ival:INTERVAL reps:REPS A payerNr:PAYER_NR amount:AMOUNT12 bg:BANKGIRO ref:TXT16 A10 status:MSG1 EOR {
        $status->setAttribute('message_id', Layouts::LAYOUT_PAYMENT_RESPONSE . '.' . $status->getValue());
        return new Response\IncomingPaymentResponse(
            $this->lineNr,
            [
                'date' => $date,
                'interval' => $ival,
                'repetitions' => $reps,
                'payer_number' => $payerNr,
                'amount' => $amount,
                'payee_bankgiro' => $bg,
                'reference' => $ref,
                'status' => $status,
            ]
        );
    };

    // OUTGOING PAYMENTS

    PAYMENT_OUTGOING_SECTION = open:PAYMENT_OUTGOING_OPENING records:(PAYMENT_OUTGOING_REC)* {
        return new Response\OutgoingPaymentResponseSection($open, ...$records);
    };

    PAYMENT_OUTGOING_OPENING = '16' account:ACCOUNT35 date:DATE serial:INT5 amount:AMOUNT18 A2 A nrRecs:INT8 EOR {
        return new Response\OutgoingPaymentResponseOpening(
            $this->lineNr,
            [
                'account' => $account,
                'date' => $date,
                'serial' => $serial,
                'amount' => $amount,
                'record_count' => $nrRecs,
            ]
        );
    };

    PAYMENT_OUTGOING_REC = '32' date:DATE ival:INTERVAL reps:REPS A payerNr:PAYER_NR amount:AMOUNT12 bg:BANKGIRO ref:TXT16 A10 status:MSG1 EOR {
        $status->setAttribute('message_id', Layouts::LAYOUT_PAYMENT_RESPONSE . '.' . $status->getValue());
        return new Response\OutgoingPaymentResponse(
            $this->lineNr,
            [
                'date' => $date,
                'interval' => $ival,
                'repetitions' => $reps,
                'payer_number' => $payerNr,
                'amount' => $amount,
                'payee_bankgiro' => $bg,
                'reference' => $ref,
                'status' => $status,
            ]
        );
    };

    // REFUND PAYMENTS

    PAYMENT_REFUND_SECTION = open:PAYMENT_REFUND_OPENING records:(PAYMENT_REFUND_REC)* {
        return new Response\RefundPaymentResponseSection($open, ...$records);
    };

    PAYMENT_REFUND_OPENING = '17' account:ACCOUNT35 date:DATE serial:INT5 amount:AMOUNT18 A2 A nrRecs:INT8 EOR {
        return new Response\RefundPaymentResponseOpening(
            $this->lineNr,
            [
                'account' => $account,
                'date' => $date,
                'serial' => $serial,
                'amount' => $amount,
                'record_count' => $nrRecs,
            ]
        );
    };

    PAYMENT_REFUND_REC = '77' date:DATE ival:INTERVAL reps:REPS A payerNr:PAYER_NR amount:AMOUNT12 bg:BANKGIRO ref:TXT16 refundDate:DATE status:MSG2 EOR {
        $status->setAttribute('message_id', Layouts::LAYOUT_PAYMENT_RESPONSE . '.' . $status->getValue());
        return new Response\RefundPaymentResponse(
            $this->lineNr,
            [
                'date' => $date,
                'interval' => $ival,
                'repetitions' => $reps,
                'payer_number' => $payerNr,
                'amount' => $amount,
                'payee_bankgiro' => $bg,
                'reference' => $ref,
                'refund_date' => $refundDate,
                'status' => $status,
            ]
        );
    };

    // PAYMENT RESPONSES IN THE OLD FORMAT

    OLD_PAYMENT_FILE = open:OLD_PAYMENT_OPENING recs:(PAYMENT_INCOMING_REC / PAYMENT_OUTGOING_REC )* close:OLD_PAYMENT_CLOSING {
        $recs[] = $close;
        return new FileNode(Layouts::LAYOUT_PAYMENT_RESPONSE_OLD, $open, ...$recs);
    };

    OLD_PAYMENT_OPENING = '01' date:DATE 'AUTOGIRO' '9900' S20 S20 bgcNr:BGC_NR bg:BANKGIRO EOR {
        return new Response\ResponseOpening(
            $this->lineNr,
            [
                'date' => $date,
                'payee_bgc_number' => $bgcNr,
                'payee_bankgiro' => $bg,
            ]
        );
    };

    OLD_PAYMENT_CLOSING = '09' date:DATE '9900' S10 S4 amountOut:AMOUNT12 nrOut:INT6 nrIn:INT6 '00000' amountIn:AMOUNT12 '00000000000' EOR {
        return new Response\PaymentResponseClosing(
            $this->lineNr,
            [
                'date' => $date,
                'total_outgoing_amount' => $amountOut,
                'nr_of_outgoing_records' => $nrOut,
                'nr_of_incoming_records' => $nrIn,
                'total_incoming_amount' => $amountIn,
            ]
        );
    };

    //
    // MANDATE RESPONSES
    //

    MANDATE_FILE = open:(OLD_MANDATE_OPENING_REC / MANDATE_OPENING_REC) mands:MANDATE_REC* close:MANDATE_CLOSING_REC {
        $mands[] = $close;
        return new FileNode(Layouts::LAYOUT_MANDATE_RESPONSE, $open, ...$mands);
    };

    MANDATE_OPENING_REC = '01' 'AUTOGIRO' S10 S4 date:DATE S10 '  AG-MEDAVI' ^ S10 S bgcNr:BGC_NR bg:BANKGIRO EOR {
        return new Response\ResponseOpening(
            $this->lineNr,
            [
                'date' => $date,
                'payee_bgc_number' => $bgcNr,
                'payee_bankgiro' => $bg,
            ]
        );
    };

    OLD_MANDATE_OPENING_REC = '01' date:DATE '9900' bg:BANKGIRO 'AG-MEDAVI' ^ EOR {
        return new Response\ResponseOpening(
            $this->lineNr,
            [
                'date' => $date,
                'payee_bgc_number' => new BgcNumberNode($this->lineNr, ''),
                'payee_bankgiro' => $bg,
            ]
        );
    };

    MANDATE_REC = '73' bg:BANKGIRO payerNr:PAYER_NR account:ACCOUNT16 id:ID (S5 / '00000') info:MSG2 status:MSG2 date:DATE validDate:$(A5 A)? EOR {
        // If account is empty a valid bankgiro number may be read from the payer number field
        if (!trim($account->getValue())) {
            $account = new ReferredAccountNode($account->getLineNr(), $payerNr->getValue());
        }

        $info->setAttribute('message_id', "73.info.{$info->getValue()}");
        $status->setAttribute('message_id', "73.status.{$status->getValue()}");

        $nodes = [
            'payee_bankgiro' => $bg,
            'payer_number' => $payerNr,
            'account' => $account,
            'id' => $id,
            'info' => $info,
            'status' => $status,
            'date' => $date,
        ];

        // A mandate-valid-from-date is only present in the old layout
        if ($validDate) {
            $nodes['valid_from_date'] = new TextNode($this->lineNr, (string)$validDate);
        }

        return new Response\MandateResponse($this->lineNr, $nodes);
    };

    MANDATE_CLOSING_REC = '09' date:DATE '9900' nrRecs:INT7 EOR {
        return new Response\MandateResponseClosing($this->lineNr, ['date' => $date, 'nr_of_records' => $nrRecs]);
    };

    //
    // REJECTED PAYMENT_RESPONSE
    //

    PAYMENT_REJECTION_FILE = open:(PAYMENT_REJECTION_OPENING / OLD_PAYMENT_REJECTION_OPENING) recs:PAYMENT_REJECTION_RECORD* close:PAYMENT_REJECTION_CLOSING {
        $recs[] = $close;
        return new FileNode(Layouts::LAYOUT_PAYMENT_REJECTION, $open, ...$recs);
    };

    PAYMENT_REJECTION_OPENING = '01' 'AUTOGIRO' S10 S4 date:DATE S10 '  AVVISADE BET UPPDR  ' ^ bgcNr:BGC_NR bg:BANKGIRO EOR {
        return new Response\ResponseOpening(
            $this->lineNr,
            [
                'date' => $date,
                'payee_bgc_number' => $bgcNr,
                'payee_bankgiro' => $bg,
            ]
        );
    };

    OLD_PAYMENT_REJECTION_OPENING = '01' date:DATE 'AUTOGIRO' '9900' 'FELLISTA REG.KONTRL' ^ S20 S bgcNr:BGC_NR bg:BANKGIRO EOR {
        return new Response\ResponseOpening(
            $this->lineNr,
            [
                'date' => $date,
                'payee_bgc_number' => $bgcNr,
                'payee_bankgiro' => $bg,
            ]
        );
    };

    PAYMENT_REJECTION_RECORD = type:(PAYMENT_REJECTION_INCOMING / PAYMENT_REJECTION_OUTGOING) date:DATE ival:INTERVAL reps:REPS payerNr:PAYER_NR amount:AMOUNT12 ref:TXT16 comment:MSG2 EOR {
        return new $type(
            $this->lineNr,
            [
                'date' => $date,
                'interval' => $ival,
                'repetitions' => $reps,
                'payer_number' => $payerNr,
                'amount' => $amount,
                'reference' => $ref,
                'comment' => $comment,
            ]
        );
    };

    PAYMENT_REJECTION_INCOMING = '82' {
        return Response\IncomingPaymentRejectionResponse::CLASS;
    };

    PAYMENT_REJECTION_OUTGOING = '32' {
        return Response\OutgoingPaymentRejectionResponse::CLASS;
    };

    PAYMENT_REJECTION_CLOSING = '09' date:DATE '9900' nrOut:INT6 amountOut:AMOUNT12 nrIn:INT6 amountIn:AMOUNT12 EOR {
        return new Response\PaymentRejectionResponseClosing(
            $this->lineNr,
            [
                'date' => $date,
                'nr_of_outgoing_records' => $nrOut,
                'total_outgoing_amount' => $amountOut,
                'nr_of_incoming_records' => $nrIn,
                'total_incoming_amount' => $amountIn,
            ]
        );
    };

    //
    // AMENDMENT RESPONSES
    //

    // TODO flytta till annat stÃ¤lle och anvÃ¤nd fÃ¶r alla openings om jag fÃ¥r det att funka...
    OPENING_INTRO = '01AUTOGIRO              ' date:DATE '            ' {
        return $date;
    };

    // TODO flytta till annat stÃ¤lle och anvÃ¤nd fÃ¶r alla openings om jag fÃ¥r det att funka...
    OLD_OPENING_INTRO = '01' date:DATE 'AUTOGIRO9900' {
        return $date;
    };

    AMENDMENT_FILE = open:(OLD_AMENDMENT_OPENING / AMENDMENT_OPENING) recs:AMENDMENT_RECORD* close:AMENDMENT_CLOSING {
        $recs[] = $close;
        return new FileNode(Layouts::LAYOUT_AMENDMENT_RESPONSE, $open, ...$recs);
    };

    AMENDMENT_OPENING = date:OPENING_INTRO 'MAKULERING/ÃNDRING  ' ^ bgcNr:BGC_NR bg:BANKGIRO EOR {
        return new Response\ResponseOpening(
            $this->lineNr,
            [
                'date' => $date,
                'payee_bgc_number' => $bgcNr,
                'payee_bankgiro' => $bg,
            ]
        );
    };

    OLD_AMENDMENT_OPENING = date:OLD_OPENING_INTRO 'MAK/ÃNDRINGSLISTA   ' ^ S20 bgcNr:BGC_NR bg:BANKGIRO EOR {
        return new Response\ResponseOpening(
            $this->lineNr,
            [
                'date' => $date,
                'payee_bgc_number' => $bgcNr,
                'payee_bankgiro' => $bg,
            ]
        );
    };

    AMENDMENT_RECORD = !'09' tc:MSG2 date:DATE payerNr:PAYER_NR type:MSG2 amount:AMOUNT12 A8 A8 ref:TXT16 comment:MSG2 EOR {
        $tc->setAttribute('message_id', Layouts::LAYOUT_AMENDMENT_RESPONSE . '.TC.' . $tc->getValue());
        return new Response\AmendmentResponse(
            $this->lineNr,
            [
                'code' => $tc,
                'date' => $date,
                'payer_number' => $payerNr,
                'type' => $type,
                'amount' => $amount,
                'reference' => $ref,
                'comment' => $comment,
            ]
        );
    };

    AMENDMENT_CLOSING = '09' date:DATE '9900' S10 S4 amountOut:AMOUNT12 nrOut:INT6 nrIn:INT6 A4 amountIn:AMOUNT12 EOR {
        return new Response\ResponseClosing(
            $this->lineNr,
            [
                'date' => $date,
                'nr_of_amended_outgoing_records' => $nrOut,
                'total_amended_outgoing_amount' => $amountOut,
                'nr_of_amended_incoming_records' => $nrIn,
                'total_amended_incoming_amount' => $amountIn,
            ]
        );
    };

    //
    // TYPE SYSTEN
    //

    // EXTERNAL TYPES

    ACCOUNT16 = number:$(A10 A5 A) {
        return new AccountNode($this->lineNr + 1, $number);
    };

    ACCOUNT35 = number:$(A10 A10 A10 A5) {
        return new AccountNode($this->lineNr + 1, $number);
    };

    AMOUNT12 = amount:$(A10 A2) {
        return new AmountNode($this->lineNr + 1, $amount);
    };

    AMOUNT18 = amount:$(A10 A5 A2 A) {
        return new AmountNode($this->lineNr + 1, $amount);
    };

    BANKGIRO = number:A10 {
        return new BankgiroNode($this->lineNr + 1, $number);
    };

    ID = number:$(A10 A2) {
        return new IdNode($this->lineNr + 1, $number);
    };

    // SIMPLE TYPES

    BGC_NR = nr:$(A5 A) {
        return new BgcNumberNode($this->lineNr + 1, $nr);
    };

    DATE = date:$(A5 A2 A) {
        return new DateNode($this->lineNr + 1, $date);
    };

    IMMEDIATE_DATE = 'GENAST  ' {
        return new ImmediateDateNode($this->lineNr + 1);
    };

    DATETIME = datetime:$(A10 A10) {
        return new DateTimeNode($this->lineNr + 1, $datetime);
    };

    INTERVAL = interval:$(A) {
        return new IntervalNode($this->lineNr + 1, $interval);
    };

    MSG1 = msg:$(A) {
        return new MessageNode($this->lineNr + 1, $msg);
    };

    MSG2 = msg:$(A A) {
        return new MessageNode($this->lineNr + 1, $msg);
    };

    PAYER_NR = nr:$(A10 A5 A) {
        return new PayerNumberNode($this->lineNr + 1, $nr);
    };

    REPS = repetitions:$(A2 A) {
        return new RepetitionsNode($this->lineNr + 1, $repetitions);
    };

    // CONVENIENCE TYPES

    INT5 = integer:$(A5) {
        return new TextNode($this->lineNr + 1, $integer, '/^\d{5}$/');
    };

    INT6 = integer:$(A5 A) {
        return new TextNode($this->lineNr + 1, $integer, '/^\d{6}$/');
    };

    INT7 = integer:$(A5 A2) {
        return new TextNode($this->lineNr + 1, $integer, '/^\d{7}$/');
    };

    INT8 = integer:$(A5 A2 A) {
        return new TextNode($this->lineNr + 1, $integer, '/^\d{8}$/');
    };

    INT12 = integer:$(A10 A2) {
        return new TextNode($this->lineNr + 1, $integer, '/^\d{12}$/');
    };

    VAR_TXT = text:$(A*) {
        return new TextNode($this->lineNr + 1, $text);
    };

    TXT16 = text:$(A10 A5 A) {
        return new TextNode($this->lineNr + 1, $text);
    };

    TXT48 = text:$(A10 A10 A10 A10 A5 A2 A) {
        return new TextNode($this->lineNr + 1, $text);
    };

    // ALPHA-NUM

    // TODO testar med ett mer tillÃ¥tande system..
    //A "ALPHA-NUMERIC" = [a-zA-Z0-9 \/&Ã¥Ã¤Ã¶ÃÃÃ-];
    A "ALPHA-NUMERIC" = !"\n" .;

    A2 = $(A A);

    A4 = $(A2 A2);

    A5 = $(A A A A A);

    A8 = $(A5 A2 A);

    A10 = $(A5 A5);

    // SPACE

    S "SPACE" = ' ';

    S4 = $(S S S S);

    S5 = $(S4 S);

    S10 = $(S5 S5);

    S20 = $(S10 S10);

    // ENDINGS

    EOR "END_OF_RECORD" = A* (EOL / EOF);

    EOL "END_OF_LINE" = "\r"? "\n" {
        $this->lineNr++;
    };

    EOF "END_OF_FILE" = !.;
}
