//<?php
/**
 * This file is part of byrokrat\autogiro.
 *
 * byrokrat\autogiro is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * byrokrat\autogiro is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with byrokrat\autogiro. If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2016-18 Hannes ForsgÃ¥rd
 */

namespace byrokrat\autogiro\Parser;

use byrokrat\autogiro\Exception\ContentException;
use byrokrat\autogiro\Tree\AutogiroFile;
use byrokrat\autogiro\Tree\Container;
use byrokrat\autogiro\Tree\Count;
use byrokrat\autogiro\Tree\Date;
use byrokrat\autogiro\Tree\Flag;
use byrokrat\autogiro\Tree\ImmediateDate;
use byrokrat\autogiro\Tree\Message;
use byrokrat\autogiro\Tree\Number;
use byrokrat\autogiro\Tree\Obj;
use byrokrat\autogiro\Tree\Record;
use byrokrat\autogiro\Tree\Section;
use byrokrat\autogiro\Tree\Summary;
use byrokrat\autogiro\Tree\Text;

grammar Grammar extends MultibyteHack
{
    start FILE = RESET_LINE_COUNT file:(REQUEST_FILE / MANDATE_FILE / PAYMENT_FILE / PAYMENT_REJECTION_FILE / AMENDMENT_FILE) VOID {
        return $file;
    };

    RESET_LINE_COUNT = '' {
        $this->lineNr = 1;
    };

    //
    // REQUEST LAYOUTS
    //

    REQUEST_FILE = sections:(REQ_MANDATE_SECTION / REQ_PAYMENT_SECTION / REQ_AMENDMENT_SECTION)+ {
        return new AutogiroFile('AutogiroRequestFile', ...$sections);
    };

    REQ_OPENING = '01' date:DATE8 'AUTOGIRO    ' S20 S20 bgcNr:BGC6 bg:BG10 EOR {
        return new Record('Opening', $date, $bgcNr, $bg);
    };

    // MANDATE REQUESTS

    REQ_MANDATE_SECTION = open:REQ_OPENING records:(REQ_DEL_MANDATE / REQ_REJECT_MANDATE / REQ_CREATE_MANDATE / REQ_UPDATE_MANDATE)+ {
        return new Section('MandateRequestSection', $open, ...$records);
    };

    REQ_DEL_MANDATE = '03' bg:BG10 payerNr:PNUM18 EOR {
        return new Record('DeleteMandateRequest', $bg, $payerNr);
    };

    REQ_REJECT_MANDATE = '04' bg:BG10 payerNr:PNUM18 A40 A8 'AV' EOR {
        return new Record('RejectDigitalMandateRequest', $bg, $payerNr);
    };

    REQ_CREATE_MANDATE = '04' bg:BG10 payerNr:PNUM18 account:ACCOUNT16? id:ID12? EOR {
        return $id && trim($id->getValueFrom('Number'))
            ? new Record('CreateMandateRequest', $bg, $payerNr, $account, $id)
            : new Record('AcceptDigitalMandateRequest', $bg, $payerNr);
    };

    REQ_UPDATE_MANDATE = '05' oldBg:BG10 oldPayerNr:PNUM18 newBg:BG10 newPayerNr:PNUM18 EOR {
        $oldPayerNr->setName('OldPayerNumber');
        $newPayerNr->setName('NewPayerNumber');
        $oldBg->setName('OldPayeeBankgiro');
        $newBg->setName('NewPayeeBankgiro');
        return new Record('UpdateMandateRequest', $oldBg, $oldPayerNr, $newBg, $newPayerNr);
    };

    // PAYMENT REQUESTS

    REQ_PAYMENT_SECTION = open:REQ_OPENING records:REQ_PAYMENT+ {
        return new Section('PaymentRequestSection', $open, ...$records);
    };

    REQ_PAYMENT = tc:('82' / '32') date:(IMMEDIATE_DATE / DATE8) ival:IVAL1 reps:REPS3 ' ' payerNr:PNUM18 amount:AMOUNT12 bg:BG10 ref:REF16 EOR {
        static $types = [
            '82' => 'IncomingPaymentRequest',
            '32' => 'OutgoingPaymentRequest',
        ];

        return new Record($types[$tc], $date, $ival, $reps, $payerNr, $amount, $bg, $ref);
    };

    // AMENDMENT REQUESTS

    REQ_AMENDMENT_SECTION = open:REQ_OPENING records:REQ_REVOCATION+ {
        return new Section('AmendmentRequestSection', $open, ...$records);
    };

    REQ_REVOCATION = &('2' [3-9]) type:MSG2 bg:BG10 payerNr:PNUM18 date:DATE8 amount:AMOUNT12 dir:MSG2 newDate:DATE8 ref:REF16 EOR {
        $type->setName('Type');
        $dir->setName('Direction');
        $newDate->setName('NewDate');
        return new Record('AmendmentRequest', $type, $bg, $payerNr, $date, $amount, $dir, $newDate, $ref);
    };

    //
    // PAYMENT RESPONSES
    //

    PAYMENT_FILE = NEW_PAYMENT_FILE / OLD_PAYMENT_FILE / BGMAX_FILE;

    NEW_PAYMENT_FILE = open:PAYMENT_OPENING sections:(PAYMENT_INCOMING_SECTION / PAYMENT_OUTGOING_SECTION / PAYMENT_REFUND_SECTION)+ close:PAYMENT_CLOSING {
        $sections[] = $close;
        return new AutogiroFile('AutogiroPaymentResponseFile', $open, ...$sections);
    };

    PAYMENT_OPENING = '01AUTOGIRO    ' S10 date:DATE20 'BET. SPEC & STOPP TK' ^ bgcNr:BGC6 bg:BG10 EOR {
        return new Record('Opening', $date, $bgcNr, $bg);
    };

    PAYMENT_CLOSING = '09' date:DATE8 '9900' nrInSecs:INT6 nrInRecs:INT12 nrOutSecs:INT6 nrOutRecs:INT12 nrRefSecs:INT6 nrRefRecs:INT12 EOR {
        return new Record(
            'Closing',
            $date,
            new Count('IncomingPaymentResponseSection', $nrInSecs),
            new Count('SuccessfulIncomingPaymentResponse', $nrInRecs),
            new Count('OutgoingPaymentResponseSection', $nrOutSecs),
            new Count('SuccessfulOutgoingPaymentResponse', $nrOutRecs),
            new Count('RefundPaymentResponseSection', $nrRefSecs),
            new Count('RefundPaymentResponse', $nrRefRecs)
        );
    };

    // INCOMING PAYMENTS

    PAYMENT_INCOMING_SECTION = open:PAYMENT_INCOMING_OPENING records:(PAYMENT_INCOMING)* {
        return new Section('IncomingPaymentResponseSection', $open, ...$records);
    };

    PAYMENT_INCOMING_OPENING = '15' account:ACCOUNT35 date:DATE8 serial:SERIAL5 amount:AMOUNT18 A2 A nrRecs:INT8 EOR {
        $nrRecs->setName('IncomingPaymentCount');
        return new Record('IncomingPaymentResponseSectionOpening', $account, $date, $serial, $amount, $nrRecs);
    };

    PAYMENT_INCOMING = '82' date:DATE8 ival:IVAL1 reps:REPS3 A payerNr:PNUM18 amount:AMOUNT12 bg:BG10 ref:REF16 A10? status:MSG1? EOR {
        if (!$status) {
            $status = new Message('', new Number($date->getLineNr(), '0'));
        }

        $status->setName('Status');
        $flag = !$status->getValueFrom('Number') ? 'Successful' : 'Failed';

        return new Record($flag.'IncomingPaymentResponse', new Flag($flag.'Flag'), $date, $ival, $reps, $payerNr, $amount, $bg, $ref, $status);
    };

    // OUTGOING PAYMENTS

    PAYMENT_OUTGOING_SECTION = open:PAYMENT_OUTGOING_OPENING records:(PAYMENT_OUTGOING)* {
        return new Section('OutgoingPaymentResponseSection', $open, ...$records);
    };

    PAYMENT_OUTGOING_OPENING = '16' account:ACCOUNT35 date:DATE8 serial:SERIAL5 amount:AMOUNT18 A2 A nrRecs:INT8 EOR {
        $nrRecs->setName('IncomingPaymentCount');
        return new Record('OutgoingPaymentResponseSectionOpening', $account, $date, $serial, $amount, $nrRecs);
    };

    PAYMENT_OUTGOING = '32' date:DATE8 ival:IVAL1 reps:REPS3 A payerNr:PNUM18 amount:AMOUNT12 bg:BG10 ref:REF16 A10? status:MSG1? EOR {
        if (!$status) {
            $status = new Message('', new Number($date->getLineNr(), '0'));
        }

        $status->setName('Status');
        $flag = $status->getValueFrom('Number') == '0' ? 'Successful' : 'Failed';

        return new Record($flag.'OutgoingPaymentResponse', new Flag($flag.'Flag'), $date, $ival, $reps, $payerNr, $amount, $bg, $ref, $status);
    };

    // REFUND PAYMENTS

    PAYMENT_REFUND_SECTION = open:PAYMENT_REFUND_OPENING records:(PAYMENT_REFUND)* {
        return new Section('RefundPaymentResponseSection', $open, ...$records);
    };

    PAYMENT_REFUND_OPENING = '17' account:ACCOUNT35 date:DATE8 serial:SERIAL5 amount:AMOUNT18 A2 A nrRecs:INT8 EOR {
        $nrRecs->setName('IncomingPaymentCount');
        return new Record('RefundPaymentResponseSectionOpening', $account, $date, $serial, $amount, $nrRecs);
    };

    PAYMENT_REFUND = '77' date:DATE8 ival:IVAL1 reps:REPS3 A payerNr:PNUM18 amount:AMOUNT12 bg:BG10 ref:REF16 refundDate:DATE8 status:MSG2 EOR {
        $refundDate->setName('RefundDate');
        $status->setName('Status');
        return new Record('RefundPaymentResponse', $date, $ival, $reps, $payerNr, $amount, $bg, $ref, $refundDate, $status);
    };

    // PAYMENT RESPONSES IN THE OLD FORMAT

    OLD_PAYMENT_FILE = open:OLD_PAYMENT_OPENING recs:OLD_PAYMENT_RESPONSE* close:OLD_PAYMENT_CLOSING {
        $recs[] = $close;
        return new AutogiroFile('AutogiroPaymentResponseOldFile', $open, ...$recs);
    };

    OLD_PAYMENT_OPENING = '01' date:DATE8 'AUTOGIRO' '9900' S20 S20 bgcNr:BGC6 bg:BG10 EOR {
        return new Record('Opening', $date, $bgcNr, $bg);
    };

    OLD_PAYMENT_RESPONSE = type:('32' / '82') date:DATE8 ival:IVAL1 reps:REPS3 A payerNr:PNUM18 amount:AMOUNT12 bg:BG10 ref:REF16 A10? status:MSG1? EOR {
        if (!$status) {
            $status = new Message('', new Number($date->getLineNr(), '0'));
        }

        $status->setName('Status');
        $flag = $status->getValue() == '0' ? 'SuccessfulFlag' : 'FailedFlag';

        static $types = [
            '32' => 'OutgoingPaymentResponse',
            '82' => 'IncomingPaymentResponse'
        ];

        return new Record($types[$type], new Flag($flag), $date, $ival, $reps, $payerNr, $amount, $bg, $ref, $status);
    };

    OLD_PAYMENT_CLOSING = '09' date:DATE8 '9900    ' S10 amountOut:AMOUNT12 nrOut:INT6 nrIn:INT6 '0000' amountIn:AMOUNT12 EOR {
        return new Record(
            'Closing',
            $date,
            new Summary('OutgoingPaymentResponse', $amountOut),
            new Count('OutgoingPaymentResponse', $nrOut),
            new Count('IncomingPaymentResponse', $nrIn),
            new Summary('IncomingPaymentResponse', $amountIn)
        );
    };

    // PAYMENT RESPONSES IN BGMAX FORMAT (NOT SUPPORTED)

    BGMAX_FILE = '01BGMAX' {
        throw new ContentException(['BGMAX format currently not supported']);
    };

    //
    // MANDATE RESPONSES
    //

    MANDATE_FILE = open:(OLD_MANDATE_OPENING / MANDATE_OPENING) mands:MANDATE* close:MANDATE_CLOSING {
        $mands[] = $close;
        return new AutogiroFile('AutogiroMandateResponseFile', $open, ...$mands);
    };

    MANDATE_OPENING = '01AUTOGIRO    ' S10 date:DATE8 S10 '  AG-MEDAVI' ^ S10 S bgcNr:BGC6 bg:BG10 EOR {
        return new Record('Opening', $date, $bgcNr, $bg);
    };

    OLD_MANDATE_OPENING = '01' date:DATE8 '9900' bg:BG10 'AG-MEDAVI' ^ EOR {
        return new Record('Opening', $date, $bg);
    };

    MANDATE = '73' bg:BG10 payerNr:PNUM18 account:ACCOUNT16 id:ID12 (S5 / '00000') info:MSG2 status:MSG2 date:DATE8 validDate:DATE6? EOR {
        // If account is empty a valid bankgiro number may be read from the payer number field
        if (!trim($account->getValueFrom('Number'))) {
            $account = new Container('Account', new Number($account->getLineNr(), $payerNr->getValue()));
        }

        $info->setName('Info');
        $status->setName('Status');

        static $status2flag = [
            '32' => 'CreatedFlag',
            '02' => 'DeletedFlag',
            '07' => 'DeletedFlag',
            '33' => 'DeletedFlag',
            '98' => 'DeletedFlag',
            '01' => 'DeletedFlag',
            '06' => 'DeletedFlag',
        ];

        $flag = $status2flag[$status->getValueFrom('Number')] ?? 'ErrorFlag';

        if ($validDate) {
            $validDate->setName('ValidFromDate');
        }

        return new Record('MandateResponse', new Flag($flag), $bg, $payerNr, $account, $id, $info, $status, $date, $validDate);
    };

    MANDATE_CLOSING = '09' date:DATE8 '9900' nrRecs:INT7 EOR {
        return new Record('Closing', $date, new Count('MandateResponse', $nrRecs));
    };

    //
    // REJECTED PAYMENT RESPONSE
    //

    PAYMENT_REJECTION_FILE = open:(PAYMENT_REJECTION_OPENING / OLD_PAYMENT_REJECTION_OPENING) recs:PAYMENT_REJECTION* close:PAYMENT_REJECTION_CLOSING {
        $recs[] = $close;
        return new AutogiroFile('AutogiroPaymentRejectionFile', $open, ...$recs);
    };

    PAYMENT_REJECTION_OPENING = '01AUTOGIRO    ' S10 date:DATE8 S10 '  AVVISADE BET UPPDR  ' ^ bgcNr:BGC6 bg:BG10 EOR {
        return new Record('Opening', $date, $bgcNr, $bg);
    };

    OLD_PAYMENT_REJECTION_OPENING = '01' date:DATE8 'AUTOGIRO' '9900' 'FELLISTA REG.KONTRL' ^ S20 S bgcNr:BGC6 bg:BG10 EOR {
        return new Record('Opening', $date, $bgcNr, $bg);
    };

    PAYMENT_REJECTION = tc:('82' / '32') date:DATE8 ival:IVAL1 reps:REPS3 payerNr:PNUM18 amount:AMOUNT12 ref:REF16 comment:MSG2 EOR {
        static $types = [
            '82' => 'IncomingPaymentRejectionResponse',
            '32' => 'OutgoingPaymentRejectionResponse',
        ];

        $comment->setName('Comment');

        return new Record($types[$tc], $date, $ival, $reps, $payerNr, $amount, $ref, $comment);
    };

    PAYMENT_REJECTION_CLOSING = '09' date:DATE8 '9900' nrOut:INT6 amountOut:AMOUNT12 nrIn:INT6 amountIn:AMOUNT12 EOR {
        return new Record(
            'Closing',
            $date,
            new Count('OutgoingPaymentRejectionResponse', $nrOut),
            new Summary('OutgoingPaymentRejectionResponse', $amountOut),
            new Count('IncomingPaymentRejectionResponse', $nrIn),
            new Summary('IncomingPaymentRejectionResponse', $amountIn)
        );
    };

    //
    // AMENDMENT RESPONSES
    //

    AMENDMENT_FILE = open:(OLD_AMENDMENT_OPENING / AMENDMENT_OPENING) recs:AMENDMENT* close:AMENDMENT_CLOSING {
        $recs[] = $close;
        return new AutogiroFile('AutogiroAmendmentResponseFile', $open, ...$recs);
    };

    AMENDMENT_OPENING = '01AUTOGIRO    ' S10 date:DATE8 S10 '  MAKULERING/ÃNDRING  ' ^ bgcNr:BGC6 bg:BG10 EOR {
        return new Record('Opening', $date, $bgcNr, $bg);
    };

    OLD_AMENDMENT_OPENING = '01' date:DATE8 'AUTOGIRO9900' 'MAK/ÃNDRINGSLISTA   ' ^ S20 bgcNr:BGC6 bg:BG10 EOR {
        return new Record('Opening', $date, $bgcNr, $bg);
    };

    AMENDMENT = !'09' type:MSG2 date:DATE8 payerNr:PNUM18 dir:MSG2 amount:AMOUNT12 A8 A8 ref:REF16 comment:MSG2 EOR {
        $type->setName('Type');
        $dir->setName('Direction');
        $ref->setName('Reference');
        $comment->setName('Comment');

        static $dirToName = [
            '82' => 'IncomingAmendmentResponse',
            '32' => 'OutgoingAmendmentResponse',
        ];

        static $successComments = ['12', '14', '18'];

        static $amendmentTypes = ['26', '27', '28', '29'];

        $name = (in_array($comment->getValueFrom('Number'), $successComments) ? 'Successful' : 'Failed')
            . ($dirToName[$dir->getValueFrom('Number')] ?? 'AmendmentResponse');

        $flag = in_array($type->getValueFrom('Number'), $amendmentTypes) ? 'AmendmentFlag' : 'RevocationFlag';

        return new Record($name, new Flag($flag), $type, $date, $payerNr, $dir, $amount, $ref, $comment);
    };

    AMENDMENT_CLOSING = '09' date:DATE8 '9900    ' S10 amountOut:AMOUNT12 nrOut:INT6 nrIn:INT6 A4 amountIn:AMOUNT12 EOR {
        return new Record(
            'Closing',
            $date,
            new Summary('SuccessfulOutgoingAmendmentResponse', $amountOut),
            new Count('SuccessfulOutgoingAmendmentResponse', $nrOut),
            new Count('SuccessfulIncomingAmendmentResponse', $nrIn),
            new Summary('SuccessfulIncomingAmendmentResponse', $amountIn)
        );
    };

    //
    // TYPE SYSTEN
    //

    // EXTERNAL TYPES

    ACCOUNT16 = number:$(A10 A5 A) {
        return new Container('Account', new Number($this->lineNr, $number));
    };

    ACCOUNT35 = number:$(A10 A10 A10 A5) {
        return new Container('Account', new Number($this->lineNr, $number));
    };

    AMOUNT12 = amount:$(A10 A2) {
        return new Container('Amount', new Text($this->lineNr, trim($amount)));
    };

    AMOUNT18 = amount:$(A10 A5 A2 A) {
        return new Container('Amount', new Text($this->lineNr, trim($amount)));
    };

    BG10 = number:A10 {
        return new Container('PayeeBankgiro', new Number($this->lineNr, $number));
    };

    ID12 = number:$(A10 A2) {
        return new Container('StateId', new Number($this->lineNr, trim($number)));
    };

    // SIMPLE TYPES

    BGC6 = nr:$(A5 A) {
        return new Number($this->lineNr, $nr, 'PayeeBgcNumber');
    };

    DATE6 = date:$(A5 A) {
        return new Date(new Number($this->lineNr, trim($date)));
    };

    DATE8 = date:$(A5 A2 A) {
        return new Date(new Number($this->lineNr, trim($date)));
    };

    DATE20 = date:$(A10 A10) {
        return new Date(new Number($this->lineNr, trim($date)));
    };

    IMMEDIATE_DATE = 'GENAST  ' {
        return new ImmediateDate($this->lineNr);
    };

    IVAL1 = interval:$(A) {
        return new Message('Interval', new Number($this->lineNr, trim($interval)));
    };

    MSG1 = msg:$(A) {
        return new Message('', new Number($this->lineNr, trim($msg)));
    };

    MSG2 = msg:$(A A) {
        return new Message('', new Number($this->lineNr, trim($msg)));
    };

    PNUM18 = nr:$(A10 A5 A) {
        return new Number($this->lineNr, trim($nr), 'PayerNumber');
    };

    REPS3 = repetitions:$(A2 A) {
        return new Number($this->lineNr, trim($repetitions), 'Repetitions');
    };

    SERIAL5 = integer:$(A5) {
        return new Number($this->lineNr, $integer, 'Serial');
    };

    REF16 = text:$(A? A? A? A? A? A? A? A? A? A? A? A? A? A? A? A?) {
        return new Text($this->lineNr, trim($text), 'Reference');
    };

    // CONVENIENCE TYPES

    INT6 = integer:$(A5 A) {
        return new Number($this->lineNr, $integer);
    };

    INT7 = integer:$(A5 A2) {
        return new Number($this->lineNr, $integer);
    };

    INT8 = integer:$(A5 A2 A) {
        return new Number($this->lineNr, $integer);
    };

    INT12 = integer:$(A10 A2) {
        return new Number($this->lineNr, $integer);
    };

    // ALPHA-NUM

    A "ALPHA-NUMERIC" = !EOL .;

    A2 = $(A A);

    A4 = $(A2 A2);

    A5 = $(A A A A A);

    A8 = $(A5 A2 A);

    A10 = $(A5 A5);

    A40 = $(A10 A10 A10 A10);

    // SPACE

    S "SPACE" = ' ';

    S5 = $(S S S S S);

    S10 = $(S5 S5);

    S20 = $(S10 S10);

    // ENDINGS

    EOR "END_OF_RECORD" = A* (EOL / EOF);

    EOL "END_OF_LINE" = "\r"? "\n" {
        $this->lineNr++;
    };

    EOF "END_OF_FILE" = !.;

    VOID = (S / "\t" / EOL)*;
}
