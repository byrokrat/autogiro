//<?php

/**
 * This file is part of byrokrat\autogiro.
 *
 * byrokrat\autogiro is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * byrokrat\autogiro is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with byrokrat\autogiro. If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2016-21 Hannes ForsgÃ¥rd
 */

namespace byrokrat\autogiro\Parser;

use byrokrat\autogiro\Exception\ParserException;
use byrokrat\autogiro\Tree\AutogiroFile;
use byrokrat\autogiro\Tree\Container;
use byrokrat\autogiro\Tree\Count;
use byrokrat\autogiro\Tree\Date;
use byrokrat\autogiro\Tree\Flag;
use byrokrat\autogiro\Tree\ImmediateDate;
use byrokrat\autogiro\Tree\Message;
use byrokrat\autogiro\Tree\Node;
use byrokrat\autogiro\Tree\Number;
use byrokrat\autogiro\Tree\Obj;
use byrokrat\autogiro\Tree\Record;
use byrokrat\autogiro\Tree\Section;
use byrokrat\autogiro\Tree\Summary;
use byrokrat\autogiro\Tree\Text;

grammar Grammar extends MultibyteHack
{
    start FILE = RESET_LINE_COUNT file:(REQUEST_FILE / MANDATE_FILE / DIGITAL_MANDATE_FILE / PAYMENT_FILE / PAYMENT_REJECTION_FILE / AMENDMENT_FILE / PAYMENT_EXTRACT_FILE / MANDATE_EXTRACT_FILE) VOID {
        return $file;
    };

    RESET_LINE_COUNT = '' {
        $this->lineNr = 1;
    };

    //
    // REQUEST LAYOUTS
    //

    REQUEST_FILE = secs:(REQ_MANDATE_SEC / REQ_PAYMENT_SEC / REQ_AMENDMENT_SEC)+ {
        return new AutogiroFile(Node::AUTOGIRO_REQUEST_FILE, ...$secs);
    };

    REQ_OPENING = '01' date:DATE8 'AUTOGIRO    ' S20 S20 bgcNr:BGC6 bg:BG10 EOR {
        return new Record(Node::OPENING, $date, $bgcNr, $bg);
    };

    // MANDATE REQUESTS

    REQ_MANDATE_SEC = open:REQ_OPENING records:(REQ_DEL_MANDATE / REQ_REJECT_MANDATE / REQ_CREATE_MANDATE / REQ_UPDATE_MANDATE)+ {
        return new Section(Node::MANDATE_REQUEST_SECTION, $open, ...$records);
    };

    REQ_DEL_MANDATE = '03' bg:BG10 payerNr:PNUM16 EOR {
        return new Record(Node::DELETE_MANDATE_REQUEST, $bg, $payerNr);
    };

    REQ_REJECT_MANDATE = '04' bg:BG10 payerNr:PNUM16 A40 A8 'AV' EOR {
        return new Record(Node::REJECT_DIGITAL_MANDATE_REQUEST, $bg, $payerNr);
    };

    REQ_CREATE_MANDATE = '04' bg:BG10 payerNr:PNUM16 account:ACCOUNT16? id:ID12? EOR {
        return $id && trim($id->getValueFrom(Node::NUMBER))
            ? new Record(Node::CREATE_MANDATE_REQUEST, $bg, $payerNr, $account, $id)
            : new Record(Node::ACCEPT_DIGITAL_MANDATE_REQUEST, $bg, $payerNr);
    };

    REQ_UPDATE_MANDATE = '05' oldBg:BG10 oldPayerNr:PNUM16 newBg:BG10 newPayerNr:PNUM16 EOR {
        $oldPayerNr->setName(Node::OLD_PAYER_NUMBER);
        $newPayerNr->setName(Node::NEW_PAYER_NUMBER);
        $oldBg->setName(Node::OLD_PAYEE_BANKGIRO);
        $newBg->setName(Node::NEW_PAYEE_BANKGIRO);
        return new Record(Node::UPDATE_MANDATE_REQUEST, $oldBg, $oldPayerNr, $newBg, $newPayerNr);
    };

    // PAYMENT REQUESTS

    REQ_PAYMENT_SEC = open:REQ_OPENING records:REQ_PAYMENT+ {
        return new Section(Node::PAYMENT_REQUEST_SECTION, $open, ...$records);
    };

    REQ_PAYMENT = tc:('82' / '32') date:(IMMEDIATE_DATE / DATE8) ival:IVAL1 reps:REPS3 S payerNr:PNUM16 amount:AMOUNT12 bg:BG10 ref:REF16 EOR {
        static $types = [
            '82' => Node::INCOMING_PAYMENT_REQUEST,
            '32' => Node::OUTGOING_PAYMENT_REQUEST,
        ];

        return new Record($types[$tc], $date, $ival, $reps, $payerNr, $amount, $bg, $ref);
    };

    // AMENDMENT REQUESTS

    REQ_AMENDMENT_SEC = open:REQ_OPENING records:REQ_REVOCATION+ {
        return new Section(Node::AMENDMENT_REQUEST_SECTION, $open, ...$records);
    };

    REQ_REVOCATION = &('2' [3-9]) type:MSG2 bg:BG10 payerNr:PNUM16 date:DATE8? amount:AMOUNT12? dir:MSG2? newDate:DATE8? ref:REF16? EOR {
        $type->setName(Node::TYPE);

        if ($dir) {
            $dir->setName(Node::DIRECTION);
        }

        if ($newDate) {
            $newDate->setName(Node::NEW_DATE);
        }

        return new Record(Node::AMENDMENT_REQUEST, $type, $bg, $payerNr, $date, $amount, $dir, $newDate, $ref);
    };

    //
    // PAYMENT RESPONSES
    //

    PAYMENT_FILE = NEW_PAYMENT_FILE / OLD_PAYMENT_FILE / BGMAX_FILE;

    NEW_PAYMENT_FILE = open:PAYMENT_OPENING secs:(PAYMENT_INCOMING_SEC / PAYMENT_OUTGOING_SEC / PAYMENT_REFUND_SEC)+ close:PAYMENT_CLOSING {
        $secs[] = $close;
        return new AutogiroFile(Node::AUTOGIRO_PAYMENT_RESPONSE_FILE, $open, ...$secs);
    };

    PAYMENT_OPENING = '01AUTOGIRO    ' S10 date:DATE20 'BET. SPEC & STOPP TK' ^ bgcNr:BGC6 bg:BG10 EOR {
        return new Record(Node::OPENING, $date, $bgcNr, $bg);
    };

    PAYMENT_CLOSING = '09' date:DATE8 '9900' nrInSecs:INT6 nrInRecs:INT12 nrOutSecs:INT6 nrOutRecs:INT12 nrRefSecs:INT6 nrRefRecs:INT12 EOR {
        return new Record(
            Node::CLOSING,
            $date,
            new Count(Node::INCOMING_PAYMENT_RESPONSE_SECTION, $nrInSecs),
            new Count(Node::SUCCESSFUL_INCOMING_PAYMENT_RESPONSE, $nrInRecs),
            new Count(Node::OUTGOING_PAYMENT_RESPONSE_SECTION, $nrOutSecs),
            new Count(Node::SUCCESSFUL_OUTGOING_PAYMENT_RESPONSE, $nrOutRecs),
            new Count(Node::REFUND_PAYMENT_RESPONSE_SECTION, $nrRefSecs),
            new Count(Node::REFUND_PAYMENT_RESPONSE, $nrRefRecs)
        );
    };

    // INCOMING PAYMENTS

    PAYMENT_INCOMING_SEC = open:PAYMENT_INCOMING_OPENING records:(PAYMENT_INCOMING)* {
        return new Section(Node::INCOMING_PAYMENT_RESPONSE_SECTION, $open, ...$records);
    };

    PAYMENT_INCOMING_OPENING = '15' account:ACCOUNT35 date:DATE8 serial:SERIAL5 amount:AMOUNT18 A2 A nrRecs:INT8 EOR {
        $nrRecs->setName(Node::INCOMING_PAYMENT_COUNT);
        return new Record(Node::INCOMING_PAYMENT_RESPONSE_SECTION_OPENING, $account, $date, $serial, $amount, $nrRecs);
    };

    PAYMENT_INCOMING = '82' date:DATE8 ival:IVAL1 reps:REPS3 A payerNr:PNUM16 amount:AMOUNT12 bg:BG10 ref:REF16 A10? status:MSG1? EOR {
        if (!$status) {
            $status = new Message('', new Number($date->getLineNr(), '0'));
        }

        $status->setName(Node::STATUS);

        if ($status->getValueFrom(Node::NUMBER)) {
            return new Record(Node::FAILED_INCOMING_PAYMENT_RESPONSE, new Flag(Node::FAILED_FLAG), $date, $ival, $reps, $payerNr, $amount, $bg, $ref, $status);
        }

        return new Record(Node::SUCCESSFUL_INCOMING_PAYMENT_RESPONSE, new Flag(Node::SUCCESSFUL_FLAG), $date, $ival, $reps, $payerNr, $amount, $bg, $ref, $status);
    };

    // OUTGOING PAYMENTS

    PAYMENT_OUTGOING_SEC = open:PAYMENT_OUTGOING_OPENING records:(PAYMENT_OUTGOING)* {
        return new Section(Node::OUTGOING_PAYMENT_RESPONSE_SECTION, $open, ...$records);
    };

    PAYMENT_OUTGOING_OPENING = '16' account:ACCOUNT35 date:DATE8 serial:SERIAL5 amount:AMOUNT18 A2 A nrRecs:INT8 EOR {
        $nrRecs->setName(Node::OUTGOING_PAYMENT_COUNT);
        return new Record(Node::OUTGOING_PAYMENT_RESPONSE_SECTION_OPENING, $account, $date, $serial, $amount, $nrRecs);
    };

    PAYMENT_OUTGOING = '32' date:DATE8 ival:IVAL1 reps:REPS3 A payerNr:PNUM16 amount:AMOUNT12 bg:BG10 ref:REF16 A10? status:MSG1? EOR {
        if (!$status) {
            $status = new Message('', new Number($date->getLineNr(), '0'));
        }

        $status->setName(Node::STATUS);

        if ($status->getValueFrom(Node::NUMBER) == '0') {
            return new Record(Node::SUCCESSFUL_OUTGOING_PAYMENT_RESPONSE, new Flag(Node::SUCCESSFUL_FLAG), $date, $ival, $reps, $payerNr, $amount, $bg, $ref, $status);
        }

        return new Record(Node::FAILED_OUTGOING_PAYMENT_RESPONSE, new Flag(Node::FAILED_FLAG), $date, $ival, $reps, $payerNr, $amount, $bg, $ref, $status);
    };

    // REFUND PAYMENTS

    PAYMENT_REFUND_SEC = open:PAYMENT_REFUND_OPENING records:(PAYMENT_REFUND)* {
        return new Section(Node::REFUND_PAYMENT_RESPONSE_SECTION, $open, ...$records);
    };

    PAYMENT_REFUND_OPENING = '17' account:ACCOUNT35 date:DATE8 serial:SERIAL5 amount:AMOUNT18 A2 A nrRecs:INT8 EOR {
        $nrRecs->setName(Node::REFUND_PAYMENT_COUNT);
        return new Record(Node::REFUND_PAYMENT_RESPONSE_SECTION_OPENING, $account, $date, $serial, $amount, $nrRecs);
    };

    PAYMENT_REFUND = '77' date:DATE8 ival:IVAL1 reps:REPS3 A payerNr:PNUM16 amount:AMOUNT12 bg:BG10 ref:REF16 refundDate:DATE8 status:MSG2 EOR {
        $refundDate->setName(Node::REFUND_DATE);
        $status->setName(Node::STATUS);
        return new Record(Node::REFUND_PAYMENT_RESPONSE, $date, $ival, $reps, $payerNr, $amount, $bg, $ref, $refundDate, $status);
    };

    // PAYMENT RESPONSES IN THE OLD FORMAT

    OLD_PAYMENT_FILE = open:OLD_PAYMENT_OPENING recs:OLD_PAYMENT_RESPONSE* close:OLD_PAYMENT_CLOSING {
        $recs[] = $close;
        return new AutogiroFile(Node::AUTOGIRO_PAYMENT_RESPONSE_OLD_FILE, $open, ...$recs);
    };

    OLD_PAYMENT_OPENING = '01' date:DATE8 'AUTOGIRO' '9900' S20 S20 bgcNr:BGC6 bg:BG10 EOR {
        return new Record(Node::OPENING, $date, $bgcNr, $bg);
    };

    OLD_PAYMENT_RESPONSE = type:('32' / '82') date:DATE8 ival:IVAL1 reps:REPS3 A payerNr:PNUM16 amount:AMOUNT12 bg:BG10 ref:REF16 A10? status:MSG1? EOR {
        static $types = [
            '32' => Node::OUTGOING_PAYMENT_RESPONSE,
            '82' => Node::INCOMING_PAYMENT_RESPONSE
        ];

        if (!$status) {
            $status = new Message('', new Number($date->getLineNr(), ''));
        }

        $status->setName(Node::STATUS);

        $flag = $status->getValueFrom(Node::NUMBER) == '0' ? Node::SUCCESSFUL_FLAG : Node::FAILED_FLAG;

        return new Record($types[$type], new Flag($flag), $date, $ival, $reps, $payerNr, $amount, $bg, $ref, $status);
    };

    OLD_PAYMENT_CLOSING = '09' date:DATE8 '9900    ' S10 amountOut:AMOUNT12 nrOut:INT6 nrIn:INT6 '0000' amountIn:AMOUNT12 EOR {
        return new Record(
            Node::CLOSING,
            $date,
            new Summary(Node::OUTGOING_PAYMENT_RESPONSE, $amountOut),
            new Count(Node::OUTGOING_PAYMENT_RESPONSE, $nrOut),
            new Count(Node::INCOMING_PAYMENT_RESPONSE, $nrIn),
            new Summary(Node::INCOMING_PAYMENT_RESPONSE, $amountIn)
        );
    };

    // PAYMENT RESPONSES IN BGMAX FORMAT (NOT SUPPORTED)

    BGMAX_FILE = '01BGMAX' {
        throw new ParserException('BGMAX format currently not supported');
    };

    //
    // MANDATE RESPONSES
    //

    MANDATE_FILE = open:(OLD_MANDATE_OPENING / MANDATE_OPENING) mands:MANDATE* close:MANDATE_CLOSING {
        $mands[] = $close;
        return new AutogiroFile(Node::AUTOGIRO_MANDATE_RESPONSE_FILE, $open, ...$mands);
    };

    MANDATE_OPENING = '01AUTOGIRO    ' S10 date:DATE8 S10 '  AG-MEDAVI' ^ S10 S bgcNr:BGC6 bg:BG10 EOR {
        return new Record(Node::OPENING, $date, $bgcNr, $bg);
    };

    OLD_MANDATE_OPENING = '01' date:DATE8 '9900' bg:BG10 'AG-MEDAVI' ^ EOR {
        return new Record(Node::OPENING, $date, $bg);
    };

    MANDATE = '73' bg:BG10 payerNr:PNUM16 account:ACCOUNT16 id:ID12 (S5 / '00000') info:MSG2 status:MSG2 date:DATE8 validDate:DATE6? EOR {
        static $status2flag = [
            '32' => Node::CREATED_FLAG,
            '02' => Node::DELETED_FLAG,
            '07' => Node::DELETED_FLAG,
            '33' => Node::DELETED_FLAG,
            '98' => Node::DELETED_FLAG,
            '01' => Node::DELETED_FLAG,
            '06' => Node::DELETED_FLAG,
        ];

        // If account is empty a valid bankgiro number may be read from the payer number field
        if (!trim($account->getValueFrom(Node::NUMBER))) {
            $account = new Container(Node::ACCOUNT, new Number($account->getLineNr(), $payerNr->getValue()));
        }

        $info->setName(Node::INFO);
        $status->setName(Node::STATUS);

        $flag = $status2flag[$status->getValueFrom(Node::NUMBER)] ?? Node::ERROR_FLAG;

        if ($validDate) {
            $validDate->setName(Node::VALID_FROM_DATE);
        }

        return new Record(Node::MANDATE_RESPONSE, new Flag($flag), $bg, $payerNr, $account, $id, $info, $status, $date, $validDate);
    };

    MANDATE_CLOSING = '09' date:DATE8 '9900' nrRecs:INT7 EOR {
        return new Record(Node::CLOSING, $date, new Count(Node::MANDATE_RESPONSE, $nrRecs));
    };

    //
    // DIGITAL MANDATES
    //

    DIGITAL_MANDATE_FILE = open:DIGITAL_MANDATE_OPENING mands:DIGITAL_MANDATE* close:DIGITAL_MANDATE_CLOSING {
        $mands[] = $close;
        return new AutogiroFile(Node::DIGITAL_MANDATE_FILE, $open, ...$mands);
    };

    DIGITAL_MANDATE_OPENING = '51' date:DATE8 '9900' bg:BG10 'AG-EMEDGIV' ^  EOR {
        return new Record(Node::OPENING, $date, $bg);
    };

    DIGITAL_MANDATE_CLOSING = '59' date:DATE8 '9900' nrRecs:INT7 EOR {
        $nrRecs->setName(Node::DIGITAL_MANDATE_COUNT);
        return new Record(Node::CLOSING, $date, $nrRecs);
    };

    DIGITAL_MANDATE = data:DIGITAL_MANDATE_START extras:(DIGITAL_MANDATE_INFO / DIGITAL_MANDATE_ADDRESS_1 / DIGITAL_MANDATE_ADDRESS_2 / DIGITAL_MANDATE_ADDRESS_3)* {
        if ($extras) {
            $extras = array_merge(...$extras);
        }

        return new Record(Node::DIGITAL_MANDATE, ...$data, ...$extras);
    };

    DIGITAL_MANDATE_START = '52' bg:BG10 payerNr:PNUM16 account:ACCOUNT16 id:ID12 S5 type:MSG1 EOR {
        $type->setName(Node::TYPE);
        return [$bg, $payerNr, $account, $id, $type];
    };

    DIGITAL_MANDATE_INFO = '53' info:TXT36 EOR {
        $info->setName(Node::INFO);
        return [$info];
    };

    DIGITAL_MANDATE_ADDRESS_1 = '54' line1:TXT36 line2:TXT36 EOR {
        $line1->setName(Node::ADRESS_1);
        $line2->setName(Node::ADRESS_2);
        return [$line1, $line2];
    };

    DIGITAL_MANDATE_ADDRESS_2 = '55' line1:TXT36 line2:TXT36 EOR {
        $line1->setName(Node::ADRESS_3);
        $line2->setName(Node::ADRESS_4);
        return [$line1, $line2];
    };

    DIGITAL_MANDATE_ADDRESS_3 = '56' postcode:INT5 city:TXT36 EOR {
        $postcode->setName(Node::POST_CODE);
        $city->setName(Node::CITY);
        return [$postcode, $city];
    };

    //
    // REJECTED PAYMENT RESPONSE
    //

    PAYMENT_REJECTION_FILE = open:(PAYMENT_REJECTION_OPENING / OLD_PAYMENT_REJECTION_OPENING) recs:PAYMENT_REJECTION* close:PAYMENT_REJECTION_CLOSING {
        $recs[] = $close;
        return new AutogiroFile(Node::AUTOGIRO_PAYMENT_REJECTION_FILE, $open, ...$recs);
    };

    PAYMENT_REJECTION_OPENING = '01AUTOGIRO    ' S10 date:DATE8 S10 '  AVVISADE BET UPPDR  ' ^ bgcNr:BGC6 bg:BG10 EOR {
        return new Record(Node::OPENING, $date, $bgcNr, $bg);
    };

    OLD_PAYMENT_REJECTION_OPENING = '01' date:DATE8 'AUTOGIRO' '9900' 'FELLISTA REG.KONTRL' ^ S20 S bgcNr:BGC6 bg:BG10 EOR {
        return new Record(Node::OPENING, $date, $bgcNr, $bg);
    };

    PAYMENT_REJECTION = tc:('82' / '32') date:DATE8 ival:IVAL1 reps:REPS3 payerNr:PNUM16 amount:AMOUNT12 ref:REF16 comment:MSG2 EOR {
        static $types = [
            '82' => Node::INCOMING_PAYMENT_REJECTION_RESPONSE,
            '32' => Node::OUTGOING_PAYMENT_REJECTION_RESPONSE,
        ];

        $comment->setName(Node::COMMENT);

        return new Record($types[$tc], $date, $ival, $reps, $payerNr, $amount, $ref, $comment);
    };

    PAYMENT_REJECTION_CLOSING = '09' date:DATE8 '9900' nrOut:INT6 amountOut:AMOUNT12 nrIn:INT6 amountIn:AMOUNT12 EOR {
        return new Record(
            Node::CLOSING,
            $date,
            new Count(Node::OUTGOING_PAYMENT_REJECTION_RESPONSE, $nrOut),
            new Summary(Node::OUTGOING_PAYMENT_REJECTION_RESPONSE, $amountOut),
            new Count(Node::INCOMING_PAYMENT_REJECTION_RESPONSE, $nrIn),
            new Summary(Node::INCOMING_PAYMENT_REJECTION_RESPONSE, $amountIn)
        );
    };

    //
    // AMENDMENT RESPONSES
    //

    AMENDMENT_FILE = open:(OLD_AMENDMENT_OPENING / AMENDMENT_OPENING) recs:AMENDMENT* close:AMENDMENT_CLOSING {
        $recs[] = $close;
        return new AutogiroFile(Node::AUTOGIRO_AMENDMENT_RESPONSE_FILE, $open, ...$recs);
    };

    AMENDMENT_OPENING = '01AUTOGIRO    ' S10 date:DATE8 S10 '  MAKULERING/'.'NDRING  ' ^ bgcNr:BGC6 bg:BG10 EOR {
        return new Record(Node::OPENING, $date, $bgcNr, $bg);
    };

    OLD_AMENDMENT_OPENING = '01' date:DATE8 'AUTOGIRO9900' 'MAK/'.'NDRINGSLISTA   ' ^ S20 bgcNr:BGC6 bg:BG10 EOR {
        return new Record(Node::OPENING, $date, $bgcNr, $bg);
    };

    AMENDMENT = !'09' type:MSG2 date:DATE8 payerNr:PNUM16 dir:MSG2 amount:AMOUNT12 A8 A8 ref:REF16 comment:MSG2 EOR {
        static $successComments = ['12', '14', '18'];
        static $amendmentTypes = ['26', '27', '28', '29'];

        $type->setName(Node::TYPE);
        $dir->setName(Node::DIRECTION);
        $ref->setName(Node::REFERENCE);
        $comment->setName(Node::COMMENT);

        if (in_array($comment->getValueFrom(Node::NUMBER), $successComments)) {
            if ($dir->getValueFrom(Node::NUMBER) == '82') {
                $name = Node::SUCCESSFUL_INCOMING_AMENDMENT_RESPONSE;
            } else if ($dir->getValueFrom(Node::NUMBER) == '32') {
                $name = Node::SUCCESSFUL_OUTGOING_AMENDMENT_RESPONSE;
            } else {
                $name = Node::SUCCESSFUL_AMENDMENT_RESPONSE;
            }
        } else {
            if ($dir->getValueFrom(Node::NUMBER) == '82') {
                $name = Node::FAILED_INCOMING_AMENDMENT_RESPONSE;
            } else if ($dir->getValueFrom(Node::NUMBER) == '32') {
                $name = Node::FAILED_OUTGOING_AMENDMENT_RESPONSE;
            } else {
                $name = Node::FAILED_AMENDMENT_RESPONSE;
            }
        }

        $flag = in_array($type->getValueFrom(Node::NUMBER), $amendmentTypes) ? Node::AMENDMENT_FLAG : Node::REVOCATION_FLAG;

        return new Record($name, new Flag($flag), $type, $date, $payerNr, $dir, $amount, $ref, $comment);
    };

    AMENDMENT_CLOSING = '09' date:DATE8 '9900    ' S10 amountOut:AMOUNT12 nrOut:INT6 nrIn:INT6 A4 amountIn:AMOUNT12 EOR {
        return new Record(
            Node::CLOSING,
            $date,
            new Summary(Node::SUCCESSFUL_OUTGOING_AMENDMENT_RESPONSE, $amountOut),
            new Count(Node::SUCCESSFUL_OUTGOING_AMENDMENT_RESPONSE, $nrOut),
            new Count(Node::SUCCESSFUL_INCOMING_AMENDMENT_RESPONSE, $nrIn),
            new Summary(Node::SUCCESSFUL_INCOMING_AMENDMENT_RESPONSE, $amountIn)
        );
    };

    //
    // PAYMENT EXTRACTS
    //

    PAYMENT_EXTRACT_FILE = open:PAYMENT_EXTRACT_OPENING recs:PAYMENT_EXTRACT* close:PAYMENT_EXTRACT_CLOSING {
        $recs[] = $close;
        return new AutogiroFile(Node::AUTOGIRO_PAYMENT_EXTRACT_FILE, $open, ...$recs);
    };

    PAYMENT_EXTRACT_OPENING = '01' date:DATE8 'AUTOGIRO9900BEVAKNINGSREG       ' ^ S20 bgcNr:BGC6 bg:BG10 EOR {
        return new Record(Node::OPENING, $date, $bgcNr, $bg);
    };

    PAYMENT_EXTRACT = type:('82' / '32') date:DATE8 ival:IVAL1 reps:REPS3 S payerNr:PNUM16 amount:AMOUNT12 A10? ref:REF16? EOR {
        static $types = [
            '82' => Node::INCOMING_PAYMENT_EXTRACT,
            '32' => Node::OUTGOING_PAYMENT_EXTRACT,
        ];

        return new Record($types[$type], $date, $ival, $reps, $payerNr, $amount, $ref);
    };

    PAYMENT_EXTRACT_CLOSING = '09' date:DATE8 '9900    ' S10 amountOut:AMOUNT12 nrOut:INT6 nrIn:INT6 A4 amountIn:AMOUNT12 EOR {
        return new Record(
            Node::CLOSING,
            $date,
            new Summary(Node::OUTGOING_PAYMENT_EXTRACT, $amountOut),
            new Count(Node::OUTGOING_PAYMENT_EXTRACT, $nrOut),
            new Count(Node::INCOMING_PAYMENT_EXTRACT, $nrIn),
            new Summary(Node::INCOMING_PAYMENT_EXTRACT, $amountIn)
        );
    };

    //
    // MANDATE EXTRACTS
    //

    MANDATE_EXTRACT_FILE = MANDATE_EXTRACT_FILE_NEW / MANDATE_EXTRACT_FILE_OLD;

    MANDATE_EXTRACT_FILE_NEW = recs:MANDATE_EXTRACT+ {
        return new AutogiroFile(Node::AUTOGIRO_MANDATE_EXTRACT_FILE, ...$recs);
    };

    MANDATE_EXTRACT_FILE_OLD = recs:MANDATE_EXTRACT_OLD+ {
        return new AutogiroFile(Node::AUTOGIRO_MANDATE_EXTRACT_FILE, ...$recs);
    };

    MANDATE_EXTRACT = bg:BG10 id:ID12 payerNr:PNUM16 type:MSG1 active:INT2 created:DATE8 updated:DATE8 !'0' status:MSG1 S? S5? account:ACCOUNT16? EOR {
        $type->setName(Node::TYPE);
        $active->setName(Node::ACTIVE_YEAR);
        $created->setName(Node::CREATED);
        $updated->setName(Node::UPDATED);
        $status->setName(Node::STATUS);
        return new Record(Node::MANDATE_EXTRACT, $bg, $id, $payerNr, $type, $active, $created, $updated, $status, $account);
    };

    MANDATE_EXTRACT_OLD = bg:BG10 id:ID12 payerNr:PNUM16 type:MSG1 active:INT1 created:DATE8 updated:DATE8 status:MSG1 '0' maxAmount:INT5? account:ACCOUNT16? EOR {
        $type->setName(Node::TYPE);
        $active->setName(Node::ACTIVE_YEAR);
        $created->setName(Node::CREATED);
        $updated->setName(Node::UPDATED);
        $status->setName(Node::STATUS);

        if ($maxAmount) {
            $maxAmount->setName(Node::MAX_AMOUNT);
        }

        return new Record(Node::MANDATE_EXTRACT, $bg, $id, $payerNr, $type, $active, $created, $updated, $status, $maxAmount, $account);
    };

    //
    // TYPE SYSTEN
    //

    // EXTERNAL TYPES

    ACCOUNT16 = number:$(A10 A5 A) {
        return new Container(Node::ACCOUNT, new Number($this->lineNr, trim($number)));
    };

    ACCOUNT35 = number:$(A10 A10 A10 A5) {
        return new Container(Node::ACCOUNT, new Number($this->lineNr, trim($number)));
    };

    AMOUNT12 = amount:$(A10 A2) {
        return new Container(Node::AMOUNT, new Text($this->lineNr, trim($amount)));
    };

    AMOUNT18 = amount:$(A10 A5 A2 A) {
        return new Container(Node::AMOUNT, new Text($this->lineNr, trim($amount)));
    };

    BG10 = number:A10 {
        return new Container(Node::PAYEE_BANKGIRO, new Number($this->lineNr, trim($number)));
    };

    ID12 = number:$(A10 A2) {
        return new Container(Node::STATE_ID, new Number($this->lineNr, trim($number)));
    };

    // SIMPLE TYPES

    BGC6 = nr:$(A5 A) {
        return new Number($this->lineNr, trim($nr), Node::PAYEE_BGC_NUMBER);
    };

    DATE6 = date:$(A5 A) {
        return new Date(new Number($this->lineNr, trim($date)));
    };

    DATE8 = date:$(A5 A2 A) {
        return new Date(new Number($this->lineNr, trim($date)));
    };

    DATE20 = date:$(A10 A10) {
        return new Date(new Number($this->lineNr, trim($date)));
    };

    IMMEDIATE_DATE = 'GENAST  ' {
        return new ImmediateDate($this->lineNr);
    };

    IVAL1 = interval:$(A) {
        return new Message(Node::INTERVAL, new Number($this->lineNr, trim($interval)));
    };

    MSG1 = msg:$(A) {
        return new Message('', new Number($this->lineNr, trim($msg)));
    };

    MSG2 = msg:$(A A) {
        return new Message('', new Number($this->lineNr, trim($msg)));
    };

    PNUM16 = nr:$(A10 A5 A) {
        return new Number($this->lineNr, trim($nr), Node::PAYER_NUMBER);
    };

    REPS3 = repetitions:$(A2 A) {
        return new Number($this->lineNr, trim($repetitions), Node::REPETITIONS);
    };

    SERIAL5 = integer:$(A5) {
        return new Number($this->lineNr, trim($integer), Node::SERIAL_NUMBER);
    };

    REF16 = text:$(A? A? A? A? A? A? A? A? A? A? A? A? A? A? A? A?) {
        return new Text($this->lineNr, trim($text), Node::REFERENCE);
    };

    TXT36 = text:$(REF16? REF16? A? A? A? A?) {
        return new Text($this->lineNr, trim($text));
    };

    // CONVENIENCE TYPES

    INT1 = integer:$(A) {
        return new Number($this->lineNr, trim($integer));
    };

    INT2 = integer:$(A A) {
        return new Number($this->lineNr, trim($integer));
    };

    INT5 = integer:$(A5) {
        return new Number($this->lineNr, trim($integer));
    };

    INT6 = integer:$(A5 A) {
        return new Number($this->lineNr, trim($integer));
    };

    INT7 = integer:$(A5 A2) {
        return new Number($this->lineNr, trim($integer));
    };

    INT8 = integer:$(A5 A2 A) {
        return new Number($this->lineNr, trim($integer));
    };

    INT12 = integer:$(A10 A2) {
        return new Number($this->lineNr, trim($integer));
    };

    // ALPHA-NUM

    A "ALPHA-NUMERIC" = !EOL .;

    A2 = $(A A);

    A4 = $(A2 A2);

    A5 = $(A A A A A);

    A8 = $(A5 A2 A);

    A10 = $(A5 A5);

    A40 = $(A10 A10 A10 A10);

    // SPACE

    S "SPACE" = ' ';

    S5 = $(S S S S S);

    S10 = $(S5 S5);

    S20 = $(S10 S10);

    // ENDINGS

    EOR "END_OF_RECORD" = A* (EOL / EOF);

    EOL "END_OF_LINE" = "\r"? "\n" {
        $this->lineNr++;
    };

    EOF "END_OF_FILE" = !.;

    VOID = (S / "\t" / EOL)*;
}
