//<?php
/**
 * This file is part of byrokrat\autogiro.
 *
 * byrokrat\autogiro is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * byrokrat\autogiro is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with byrokrat\autogiro. If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2016-18 Hannes Forsgård
 */

namespace byrokrat\autogiro\Parser;

use byrokrat\autogiro\Layouts;
use byrokrat\autogiro\Tree\AccountNode;
use byrokrat\autogiro\Tree\AmountNode;
use byrokrat\autogiro\Tree\BankgiroNode;
use byrokrat\autogiro\Tree\BgcNumberNode;
use byrokrat\autogiro\Tree\ImmediateDateNode;
use byrokrat\autogiro\Tree\DateNode;
use byrokrat\autogiro\Tree\FileNode;
use byrokrat\autogiro\Tree\IdNode;
use byrokrat\autogiro\Tree\IntervalNode;
use byrokrat\autogiro\Tree\LayoutNode;
use byrokrat\autogiro\Tree\MessageNode;
use byrokrat\autogiro\Tree\PayerNumberNode;
use byrokrat\autogiro\Tree\Record\Request;
use byrokrat\autogiro\Tree\Record;
use byrokrat\autogiro\Tree\ReferredAccountNode;
use byrokrat\autogiro\Tree\RepetitionsNode;
use byrokrat\autogiro\Tree\TextNode;

grammar Grammar
{
    start FILE = RESET_LINE_COUNT file:(REQUEST_FILE / RESP_MANDATE_FILE / RESP_PAYMENT_FILE) {
        return $file;
    };

    RESET_LINE_COUNT = '' {
        $this->lineNr = 0;
    };

    //
    // REQUEST LAYOUTS
    //

    REQUEST_FILE = layouts:(REQ_MANDATE_LAYOUT / REQ_PAYMENT_LAYOUT / REQ_AMENDMENT_LAYOUT)+ {
        return new FileNode(...$layouts);
    };

    REQ_OPENING_RECORD = '01' date:DATE 'AUTOGIRO' S20 S20 S4 bgcNr:BGC_NR bg:BANKGIRO void:EOR {
        return new Request\RequestOpeningRecordNode(
            $this->lineNr,
            $date,
            new TextNode($this->lineNr + 1, 'AUTOGIRO'),
            new TextNode($this->lineNr + 1, str_repeat(' ', 44)),
            $bgcNr,
            $bg,
            $void
        );
    };

    // MANDATE REQUESTS

    REQ_MANDATE_LAYOUT = open:REQ_OPENING_RECORD records:(REQ_DEL_MANDATE_RECORD / REQ_REJECT_MANDATE_RECORD / REQ_CREATE_MANDATE_RECORD / REQ_UPDATE_MANDATE_RECORD)+ {
        return new LayoutNode(Layouts::LAYOUT_MANDATE_REQUEST, $open, ...$records);
    };

    REQ_DEL_MANDATE_RECORD = '03' bg:BANKGIRO payerNr:PAYER_NR void:EOR {
        return new Request\DeleteMandateRequestNode($this->lineNr, $bg, $payerNr, $void);
    };

    REQ_REJECT_MANDATE_RECORD = '04' bg:BANKGIRO payerNr:PAYER_NR space:TEXT48 'AV' void:EOR {
        return new Request\RejectDigitalMandateRequestNode($this->lineNr, $bg, $payerNr, $space, new TextNode($this->lineNr, 'AV'), $void);
    };

    REQ_CREATE_MANDATE_RECORD = '04' bg:BANKGIRO payerNr:PAYER_NR account:ACCOUNT? id:ID? void:EOR {
        return $id && trim($id->getValue())
            ? new Request\CreateMandateRequestNode($this->lineNr, $bg, $payerNr, $account, $id, $void)
            : new Request\AcceptDigitalMandateRequestNode($this->lineNr, $bg, $payerNr, $void);
    };

    REQ_UPDATE_MANDATE_RECORD = '05' oldBg:BANKGIRO oldPayerNr:PAYER_NR newBg:BANKGIRO newPayerNr:PAYER_NR void:EOR {
        return new Request\UpdateMandateRequestNode($this->lineNr, $oldBg, $oldPayerNr, $newBg, $newPayerNr, $void);
    };

    // PAYMENT REQUESTS

    REQ_PAYMENT_LAYOUT = open:REQ_OPENING_RECORD records:(REQ_TRANSACTION_RECORD)+ {
        return new LayoutNode(Layouts::LAYOUT_PAYMENT_REQUEST, $open, ...$records);
    };

    REQ_TRANSACTION_RECORD = tc:('32' / '82') date:(IMMEDIATE_DATE / DATE) ival:INTERVAL reps:REPS space:VOID payerNr:PAYER_NR amount:AMOUNT bg:BANKGIRO ref:VARIABLE_TEXT void:EOR {
        return $tc == '82'
            ? new Request\IncomingTransactionRequestNode($this->lineNr, $date, $ival, $reps, $space, $payerNr, $amount, $bg, $ref, $void)
            : new Request\OutgoingTransactionRequestNode($this->lineNr, $date, $ival, $reps, $space, $payerNr, $amount, $bg, $ref, $void);
    };

    // AMENDMENT REQUESTS

    REQ_AMENDMENT_LAYOUT = open:REQ_OPENING_RECORD records:('TODO')+ {
        // TODO this is just a stub...
        return new LayoutNode(Layouts::LAYOUT_AMENDMENT_REQUEST, $open, ...$records);
    };

    //
    // RESPONSE LAYOUTS
    //

    // PAYMENT RESPONSES

    RESP_PAYMENT_FILE = open:RESP_PAYMENT_OPENING_RECORD mands:RESP_MANDATE_RECORD* close:RESP_MANDATE_CLOSING_RECORD {
        return new FileNode(new LayoutNode(Layouts::LAYOUT_PAYMENT_RESPONSE, $open, $close, ...$mands));
    };

    RESP_PAYMENT_OPENING_RECORD = '01' 'AUTOGIRO' S10 S4 date:DATE S10 S2 'BET. SPEC & STOPP TK' ^ bgcNr:BGC_NR bg:BANKGIRO void:EOR {
        // TODO DATETIME...
        return new Record\ResponseOpeningRecord($this->lineNr, $date, $bgcNr, $bg, $void);
    };

    // MANDATE RESPONSES

    RESP_MANDATE_FILE = open:(RESP_MANDATE_OPENING_OLD_RECORD / RESP_MANDATE_OPENING_RECORD) mands:RESP_MANDATE_RECORD* close:RESP_MANDATE_CLOSING_RECORD {
        return new FileNode(new LayoutNode(Layouts::LAYOUT_MANDATE_RESPONSE, $open, $close, ...$mands));
    };

    RESP_MANDATE_OPENING_RECORD = '01' 'AUTOGIRO' S10 S4 date:DATE S10 S2 'AG-MEDAVI' ^ S10 S bgcNr:BGC_NR bg:BANKGIRO void:EOR {
        return new Record\ResponseOpeningRecord($this->lineNr, $date, $bgcNr, $bg, $void);
    };

    RESP_MANDATE_OPENING_OLD_RECORD = '01' date:DATE '9900' bg:BANKGIRO 'AG-MEDAVI' ^ void:EOR {
        return new Record\ResponseOpeningRecord($this->lineNr, $date, new BgcNumberNode($this->lineNr, ''), $bg, $void);
    };

    RESP_MANDATE_RECORD = '73' bg:BANKGIRO payerNr:PAYER_NR account:ACCOUNT id:ID (S5 / '00000') info:MESSAGE status:MESSAGE date:DATE validDate:$(A5 A)? void:EOR {
        // If account is empty a valid bankgiro number may be read from the payer number field
        if (!trim($account->getValue())) {
            $account = new ReferredAccountNode($account->getLineNr(), $payerNr->getValue());
        }

        // A mandate-valid-from-date is only present in the old layout
        if ($validDate) {
            array_unshift($void, new TextNode($this->lineNr, (string)$validDate));
        }

        $info->setAttribute('message_id', "73.info.{$info->getValue()}");
        $status->setAttribute('message_id', "73.status.{$status->getValue()}");

        return new Record\MandateResponseRecord($this->lineNr, $bg, $payerNr, $account, $id, $info, $status, $date, $void);
    };

    RESP_MANDATE_CLOSING_RECORD = '09' date:DATE '9900' nrOfPosts:INT7 void:EOR {
        return new Record\MandateResponseClosingRecord($this->lineNr, $date, $nrOfPosts, $void);
    };

    // EXTERNAL TYPES

    ACCOUNT = number:$(A10 A5 A) {
        return new AccountNode($this->lineNr + 1, $number);
    };

    AMOUNT = amount:$(A10 A2) {
        return new AmountNode($this->lineNr + 1, $amount);
    };

    BANKGIRO = number:A10 {
        return new BankgiroNode($this->lineNr + 1, $number);
    };

    ID = number:$(A10 A2) {
        return new IdNode($this->lineNr + 1, $number);
    };

    // SIMPLE TYPES

    BGC_NR = nr:$(A5 A) {
        return new BgcNumberNode($this->lineNr + 1, $nr);
    };

    DATE = date:$(A5 A2 A) {
        return new DateNode($this->lineNr + 1, $date);
    };

    IMMEDIATE_DATE = 'GENAST  ' {
        return new ImmediateDateNode($this->lineNr + 1);
    };

    INTERVAL = interval:$(A) {
        return new IntervalNode($this->lineNr + 1, $interval);
    };

    MESSAGE = msg:$(A A) {
        return new MessageNode($this->lineNr + 1, $msg);
    };

    PAYER_NR = nr:$(A10 A5 A) {
        return new PayerNumberNode($this->lineNr + 1, $nr);
    };

    REPS = repetitions:$(A2 A) {
        return new RepetitionsNode($this->lineNr + 1, $repetitions);
    };

    // CONVENIENCE TYPES

    INT7 = integer:$(A5 A2) {
        return new TextNode($this->lineNr + 1, $integer, '/^\d{7}$/');
    };

    VARIABLE_TEXT = text:$(A*) {
        return new TextNode($this->lineNr + 1, $text);
    };

    TEXT48 = text:$(A10 A10 A10 A10 A5 A2 A) {
        return new TextNode($this->lineNr + 1, $text);
    };

    VOID = text:$(A) {
        return new TextNode($this->lineNr + 1, $text, '/^ $/');
    };

    // ALPHA-NUM

    A "ALPHA-NUMERIC" = [a-zA-Z0-9 \/&åäöÅÄÖ-];

    A2 = $(A A);

    A5 = $(A A A A A);

    A10 = $(A5 A5);

    // SPACE

    S "SPACE" = ' ';

    S2 = S S;

    S4 = S2 S2;

    S5 = S4 S;

    S10 = S5 S5;

    S20 = S10 S10;

    // ENDINGS

    EOR "END_OF_RECORD" = void:VOID* (EOL / EOF) {
        return $void;
    };

    EOL "END_OF_LINE" = "\r"? "\n" {
        $this->lineNr++;
    };

    EOF "END_OF_FILE" = !.;
}
