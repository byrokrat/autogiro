//<?php
/**
 * This file is part of byrokrat\autogiro.
 *
 * byrokrat\autogiro is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * byrokrat\autogiro is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with byrokrat\autogiro. If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2016-17 Hannes Forsgård
 */

namespace byrokrat\autogiro;

use byrokrat\autogiro\Tree\AccountNode;
use byrokrat\autogiro\Tree\AmountNode;
use byrokrat\autogiro\Tree\PayeeBankgiroNode;
use byrokrat\autogiro\Tree\PayeeBgcNumberNode;
use byrokrat\autogiro\Tree\ImmediateDateNode;
use byrokrat\autogiro\Tree\DateNode;
use byrokrat\autogiro\Tree\FileNode;
use byrokrat\autogiro\Tree\IdNode;
use byrokrat\autogiro\Tree\IntervalNode;
use byrokrat\autogiro\Tree\LayoutNode;
use byrokrat\autogiro\Tree\MessageNode;
use byrokrat\autogiro\Tree\PayerNumberNode;
use byrokrat\autogiro\Tree\Record\ClosingRecordNode;
use byrokrat\autogiro\Tree\Record\OpeningRecordNode;
use byrokrat\autogiro\Tree\Record\Request;
use byrokrat\autogiro\Tree\Record\Response;
use byrokrat\autogiro\Tree\RepetitionsNode;
use byrokrat\autogiro\Tree\TextNode;

grammar Grammar
{
    // TODO Det enda som inte ska vara nodes är transaktionskoder
        // på något sätt måste trotts allt olika record skiljas från varandra vid parse-time..

        // stega igenom filen och kontrollera att det stämmer överallt...

    // TODO lägg till någon form av ErrorNode så att jag om jag skickar in helt
        // felaktig text så får vi trotts allt ett bra felmeddelande
        //
        // lägg ett behat test för detta också...

    start FILE = RESET_LINE_COUNT layout:(REQUEST_FILE / L_RESP_MANDATE) {
        return $layout;
    };

    RESET_LINE_COUNT = '' {
        $this->lineNr = 0;
    };

    // GENERIC RECORDS

    R_GENERIC_OPENING = '01' ag:AUTOGIRO space1:VOID14 date:DATE space2:VOID12 layout:TEXT20 payeeBgcNr:BGC_NR payeeBg:PAYEE_BG void:EOR {
        return new OpeningRecordNode($this->lineNr, $ag, $space1, $date, $space2, $layout, $payeeBgcNr, $payeeBg, $void);
    };

    //
    // REQUEST LAYOUTS
    //

    REQUEST_FILE = layouts:(L_REQ_MANDATE / L_REQ_PAYMENT / L_REQ_AMENDMENT)+ {
        return new FileNode(...$layouts);
    };

    R_REQ_OPENING = '01' date:DATE ag:AUTOGIRO space:VOID44 payeeBgcNr:BGC_NR payeeBg:PAYEE_BG void:EOR {
        return new Request\RequestOpeningRecordNode($this->lineNr, $date, $ag, $space, $payeeBgcNr, $payeeBg, $void);
    };

    // MANDATE REQUESTS

    // TODO fundera på om mitt naming convention kan bli tydligare här...

    L_REQ_MANDATE = open:R_REQ_OPENING records:(R_REQ_CREATE_MANDATE / R_REQ_UPDATE_MANDATE / R_REQ_DEL_MANDATE)+ {
        return (new LayoutNode($open, ...$records))->setAttribute('layout_name', Layouts::LAYOUT_MANDATE_REQUEST);
    };

    R_REQ_CREATE_MANDATE = '04' payeeBg:PAYEE_BG payerNr:PAYER_NR account:ACCOUNT? id:ID? space:VOID20? reject:'AV'? void:EOR {
        // TODO $space måste också sparas till objekt för att kunna valideras...
        // TODO och reject??

        new TextNode($this->lineNr, (string)$reject, '/^(AV)|( {0,2})$/');

        if ($reject == 'AV') {
            return new Request\RejectMandateRequestNode($this->lineNr, $payeeBg, $payerNr, $void);
        }

        return $account && $id
            ? new Request\CreateMandateRequestNode($this->lineNr, $payeeBg, $payerNr, $account, $id, $void)
            : new Request\AcceptMandateRequestNode($this->lineNr, $payeeBg, $payerNr, $void);
    };

    R_REQ_UPDATE_MANDATE = '05' oldPayeeBg:PAYEE_BG oldPayerNr:PAYER_NR newPayeeBg:PAYEE_BG newPayerNr:PAYER_NR void:EOR {
        return new Request\UpdateMandateRequestNode($this->lineNr, $oldPayeeBg, $oldPayerNr, $newPayeeBg, $newPayerNr, $void);
    };

    R_REQ_DEL_MANDATE = '03' payeeBg:PAYEE_BG payerNr:PAYER_NR void:EOR {
        return new Request\DeleteMandateRequestNode($this->lineNr, $payeeBg, $payerNr, $void);
    };

    // PAYMENT REQUESTS

    L_REQ_PAYMENT = open:R_REQ_OPENING records:(R_REQ_TRANSACTION)+ {
        return (new LayoutNode($open, ...$records))->setAttribute('layout_name', Layouts::LAYOUT_PAYMENT_REQUEST);
    };

    R_REQ_TRANSACTION = tc:('82' / '32') date:(IMMEDIATE_DATE / DATE) ival:INTERVAL reps:REPS space:VOID payerNr:PAYER_NR amount:AMOUNT payeeBg:PAYEE_BG ref:VARIABLE_TEXT void:EOR {
        return $tc == '82'
            ? new Request\IncomingTransactionRequestNode($this->lineNr, $date, $ival, $reps, $space, $payerNr, $amount, $payeeBg, $ref, $void)
            : new Request\OutgoingTransactionRequestNode($this->lineNr, $date, $ival, $reps, $space, $payerNr, $amount, $payeeBg, $ref, $void);
    };

    // AMENDMENT REQUESTS

    L_REQ_AMENDMENT = open:R_REQ_OPENING records:('TODO')+ {
        // TODO this is just a stub...
        return (new LayoutNode($open, ...$records))->setAttribute('layout_name', Layouts::LAYOUT_AMENDMENT_REQUEST);
    };

    //
    // RESPONSE LAYOUTS
    //

    // MANDATE RESPONSES

    L_RESP_MANDATE = open:(R_GENERIC_OPENING / R_RESP_MANDATE_OPENING_OLD) mands:R_RESP_MANDATE* close:R_RESP_MANDATE_CLOSING {
        return new FileNode(
            (new LayoutNode($open, $close, ...$mands))->setAttribute('layout_name', Layouts::LAYOUT_MANDATE_RESPONSE)
        );
    };

    R_RESP_MANDATE_OPENING_OLD = '01' date:DATE clear:BGC_CLEARING payeeBg:PAYEE_BG layout:$(A5 A2 A2) void:EOR {
        return new OpeningRecordNode(
            $this->lineNr,
            new TextNode($this->lineNr, ''),
            new TextNode($this->lineNr, ''),
            $date,
            $clear,
            new TextNode($this->lineNr, $layout, '/^AG-MEDAVI$/'),
            new PayeeBgcNumberNode($this->lineNr, ''),
            $payeeBg,
            $void
        );
    };

    R_RESP_MANDATE = '73' payeeBg:PAYEE_BG payerNr:PAYER_NR account:ACCOUNT id:ID A5 info:$(A A) comment:$(A A) date:DATE? validDate:$(A5 A)? void:EOR {
        $account = $account->getValue()
            ? $account
            : new AccountNode($this->lineNr, $payerNr->getValue());

        // TODO här oven finns en A5 som måste sparas...

        // TODO $validDate måste sparas, se s 78 i specen, det är datum då medgivandet är giltigt för debitering..
            // dock bara sex siffror, så det är inte riktigt som det vanliga date...

        return new Response\MandateResponseNode(
            $this->lineNr,
            $payeeBg,
            $payerNr,
            $account,
            $id,
            new MessageNode($this->lineNr, "73.$info"),
            new MessageNode($this->lineNr, "73.comment.$comment"),
            $date ?: new DateNode($this->lineNr, '@0'),
            $void
        );
    };

    R_RESP_MANDATE_CLOSING = '09' date:DATE clear:BGC_CLEARING nrOfPosts:INT7 void:EOR {
        // TODO $clear måste sparas så att det kan valideras...
        return new ClosingRecordNode($this->lineNr, $date, $nrOfPosts, $void);
    };

    // EXTERNAL TYPES

    ACCOUNT = number:$(A10 A5 A) {
        return new AccountNode($this->lineNr + 1, $number);
    };

    AMOUNT = amount:$(A10 A2) {
        return new AmountNode($this->lineNr + 1, $amount);
    };

    PAYEE_BG = number:A10 {
        return new PayeeBankgiroNode($this->lineNr + 1, $number);
    };

    ID = number:$(A10 A2) {
        return new IdNode($this->lineNr + 1, $number);
    };

    // SIMPLE TYPES

    AUTOGIRO = text:$(A5 A2 A) {
        return new TextNode($this->lineNr + 1, $text, '/^AUTOGIRO$/');
    };

    BGC_CLEARING = clear:$(A2 A2) {
        return new TextNode($this->lineNr, $clear, '/^9900$/');
    };

    BGC_NR = nr:$(A5 A) {
        return new PayeeBgcNumberNode($this->lineNr + 1, $nr);
    };

    DATE = date:$(A5 A2 A) {
        return new DateNode($this->lineNr + 1, $date);
    };

    IMMEDIATE_DATE = 'GENAST  ' {
        return new ImmediateDateNode($this->lineNr + 1);
    };

    INTERVAL = interval:$(A) {
        return new IntervalNode($this->lineNr + 1, $interval);
    };

    PAYER_NR = nr:$(A10 A5 A) {
        return new PayerNumberNode($this->lineNr + 1, $nr);
    };

    REPS = repetitions:$(A2 A) {
        return new RepetitionsNode($this->lineNr + 1, $repetitions);
    };

    // CONVENIENCE TYPES

    INT7 = integer:$(A5 A2) {
        return new TextNode($this->lineNr + 1, $integer, '/^\d{7}$/');
    };

    VARIABLE_TEXT = text:$(A*) {
        return new TextNode($this->lineNr + 1, $text);
    };

    TEXT20 = text:$(A10 A10) {
        return new TextNode($this->lineNr + 1, $text);
    };

    VOID = text:$(A) {
        return new TextNode($this->lineNr + 1, $text, '/^ $/');
    };

    VOID10 = text:$(A10) {
        return new TextNode($this->lineNr + 1, $text, '/^ {10}$/');
    };

    VOID12 = text:$(A10 A2) {
        return new TextNode($this->lineNr + 1, $text, '/^ {12}$/');
    };

    VOID14 = text:$(A10 A2 A2) {
        return new TextNode($this->lineNr + 1, $text, '/^ {14}$/');
    };

    VOID20 = text:$(A10 A10) {
        return new TextNode($this->lineNr + 1, $text, '/^ {20}$/');
    };

    VOID44 = text:$(A10 A10 A10 A10 A2 A2) {
        return new TextNode($this->lineNr + 1, $text, '/^ {44}$/');
    };

    // HELPERS

    A "ALPHA-NUMERIC" = [a-zA-Z0-9 \/&åäöÅÄÖ-];

    A2 = $(A A);

    A5 = $(A A A A A);

    A10 = $(A5 A5);

    // ENDINGS

    EOR "END_OF_RECORD" = void:VOID* (EOL / EOF) {
        return $void;
    };

    EOL "END_OF_LINE" = "\r"? "\n" {
        $this->lineNr++;
    };

    EOF "END_OF_FILE" = !.;
}
