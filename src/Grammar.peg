//<?php
/**
 * This file is part of byrokrat\autogiro.
 *
 * byrokrat\autogiro is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * byrokrat\autogiro is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with byrokrat\autogiro. If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2016 Hannes Forsgård
 */

namespace byrokrat\autogiro;

use byrokrat\autogiro\Tree\FileNode;
use byrokrat\autogiro\Tree\LayoutNode;
use byrokrat\autogiro\Tree\OpeningNode;
use byrokrat\autogiro\Tree\ClosingNode;
use byrokrat\autogiro\Tree\RequestMandateCreationNode;
use byrokrat\autogiro\Tree\RequestMandateAcceptanceNode;
use byrokrat\autogiro\Tree\RequestMandateRejectionNode;
use byrokrat\autogiro\Tree\RequestMandateUpdateNode;
use byrokrat\autogiro\Tree\RequestMandateDeletionNode;
use byrokrat\autogiro\Tree\RequestIncomingTransactionNode;
use byrokrat\autogiro\Tree\RequestOutgoingTransactionNode;
use byrokrat\autogiro\Tree\RequestTransactionDeletionNode;
use byrokrat\autogiro\Tree\RequestTransactionUpdateNode;
use byrokrat\autogiro\Tree\MandateResponseNode;
use byrokrat\autogiro\Tree\PersonalIdNode;
use byrokrat\autogiro\Tree\OrganizationIdNode;
use byrokrat\autogiro\Tree\AmountNode;
use byrokrat\autogiro\Tree\AccountNode;
use byrokrat\autogiro\Tree\BankgiroNode;
use byrokrat\autogiro\Tree\BgcCustomerNumberNode;
use byrokrat\autogiro\Tree\DateNode;
use byrokrat\autogiro\Tree\MessageNode;
use byrokrat\autogiro\Tree\PayerNumberNode;

grammar Grammar
{
    start FILE = RESET_LINE_COUNT layout:(L_REQ_CONTAINER / L_RESP_MANDATE) {
        return $layout;
    };

    RESET_LINE_COUNT = '' {
        $this->currentLineNr = 0;
    };

    // GENERIC RECORDS

    R_GENERIC_OPENING = '01' 'AUTOGIRO' S10 S S S S date:DATE S10 S S layout:A20 custNr:CUST_NR bg:BANKGIRO EOR {
        return new OpeningNode(rtrim($layout), $date, $custNr, $bg, $this->currentLineNr);
    };

    //
    // REQUEST LAYOUTS
    //

    L_REQ_CONTAINER = layouts:(L_REQ_MANDATE / L_REQ_PAYMENT / L_REQ_AMENDMENT)+ {
        return new FileNode(...$layouts);
    };

    R_REQ_OPENING = '01' date:DATE 'AUTOGIRO' S20 S20 S S S S custNr:CUST_NR bg:BANKGIRO EOR {
        // TODO layout_request kan vara ''
            // kanske lägga in ett test i visitor som kontrollerar att layoutId är ett känt värde... ??
        return new OpeningNode('', $date, $custNr, $bg, $this->currentLineNr);
    };

    // MANDATE REQUESTS

    L_REQ_MANDATE = opening:R_REQ_OPENING records:(R_REQ_CREATE_MANDATE / R_REQ_CONFIRM_MANDATE / R_REQ_UPDATE_MANDATE / R_REQ_DEL_MANDATE)+ {
        $opening->setAttribute('layout_name', Layouts::LAYOUT_MANDATE_REQUEST);

        return new LayoutNode(
            $opening,
            new ClosingNode($opening->getChild('date'), count($records), $this->currentLineNr),
            ...$records
        );
    };

    R_REQ_CREATE_MANDATE = '04' bg:BANKGIRO payerNr:PAYER_NR account:ACCOUNT id:ID (S20 S S)? EOR {
        return new RequestMandateCreationNode($bg, $payerNr, $account, $id, $this->currentLineNr);
    };

    R_REQ_CONFIRM_MANDATE = '04' bg:BANKGIRO payerNr:PAYER_NR (A40 A5 A A A reject:'AV')? EOR {
        return $reject == 'AV'
            ? new RequestMandateRejectionNode($bg, $payerNr, $this->currentLineNr)
            : new RequestMandateAcceptanceNode($bg, $payerNr, $this->currentLineNr);
    };

    R_REQ_UPDATE_MANDATE = '05' oldBg:BANKGIRO oldPayerNr:PAYER_NR newBg:BANKGIRO newPayerNr:PAYER_NR EOR {
        return new RequestMandateUpdateNode($oldBg, $oldPayerNr, $newBg, $newPayerNr, $this->currentLineNr);
    };

    R_REQ_DEL_MANDATE = '03' bg:BANKGIRO payerNr:PAYER_NR EOR {
        return new RequestMandateDeletionNode($bg, $payerNr, $this->currentLineNr);
    };

    // PAYMENT REQUESTS

    L_REQ_PAYMENT = opening:R_REQ_OPENING records:('')+ {
        $opening->setAttribute('layout_name', Layouts::LAYOUT_PAYMENT_REQUEST);

        return new LayoutNode(
            $opening,
            new ClosingNode($opening->getChild('date'), count($records), $this->currentLineNr),
            ...$records
        );
    };

    // AMENDMENT REQUESTS

    L_REQ_AMENDMENT = opening:R_REQ_OPENING records:('')+ {
        $opening->setAttribute('layout_name', Layouts::LAYOUT_AMENDMENT_REQUEST);

        return new LayoutNode(
            $opening,
            new ClosingNode($opening->getChild('date'), count($records), $this->currentLineNr),
            ...$records
        );
    };

    //
    // RESPONSE LAYOUTS
    //

    // MANDATE RESPONSES

    L_RESP_MANDATE = opening:(R_GENERIC_OPENING / R_RESP_MANDATE_OPENING_OLD) mandates:R_RESP_MANDATE* closing:R_RESP_MANDATE_CLOSING {
        return new FileNode(new LayoutNode($opening, $closing, ...$mandates));
    };

    R_RESP_MANDATE_OPENING_OLD = '01' date:DATE BGC_CLEARING bg:BANKGIRO 'AG-MEDAVI' EOR {
        return new OpeningNode(
            'AG-MEDAVI',
            $date,
            new BgcCustomerNumberNode($this->currentLineNr, ''),
            $bg,
            $this->currentLineNr
        );
    };

    R_RESP_MANDATE = '73' bg:BANKGIRO payerNr:PAYER_NR accountNr:$(A10 A5 A) id:ID A5 info:$(N N) comment:$(N N) date:DATE? EOR {
        // TODO fundera om jag kan dela upp denna i flera R_ så att jag kan använda ACCOUNT ...
        $accountNr = trim(ltrim($accountNr, '0'));

        return new MandateResponseNode(
            $bg,
            $payerNr,
            new AccountNode($this->currentLineNr, $accountNr ?: $payerNr->getValue()),
            $id,
            new MessageNode($this->currentLineNr, "73.$info"),
            new MessageNode($this->currentLineNr, "73.comment.$comment"),
            $date ?: new DateNode($this->currentLineNr, '@0'),
            $this->currentLineNr
        );
    };

    R_RESP_MANDATE_CLOSING = '09' date:DATE BGC_CLEARING nrOfPosts:$(N5 N N) EOR {
        return new ClosingNode($date, intval($nrOfPosts), $this->currentLineNr);
    };

    // TYPES

    ACCOUNT = number:$(N10 N5 N) {
        return new AccountNode($this->currentLineNr, ltrim($number, '0'));
    };

    BANKGIRO = number:N10 {
        return new BankgiroNode($this->currentLineNr, ltrim($number, '0'));
    };

    BGC_CLEARING = '9900';

    CUST_NR = nr:$(N5 N) {
        return new BgcCustomerNumberNode($this->currentLineNr, ltrim($nr, '0'));
    };

    DATE = date:$(N5 N N N) {
        return new DateNode($this->currentLineNr, $date);
    };

    ID = century:$(A A) number:A10 {
        return in_array($century, ['00', '99'])
            ? new OrganizationIdNode($this->currentLineNr, $number)
            : new PersonalIdNode($this->currentLineNr, $century.$number);
    };

    PAYER_NR = nr:$(N10 N5 N) {
        return new PayerNumberNode($this->currentLineNr, ltrim($nr, '0'));
    };

    // HELPERS

    A "ALPHA-NUMERIC" = [a-zA-Z0-9 -\/&];

    A5 = $(A A A A A);

    A10 = $(A5 A5);

    A20 = $(A10 A10);

    A40 = $(A20 A20);

    N "NUMBER" = [0-9];

    N5 = $(N N N N N);

    N10 = $(N5 N5);

    N20 = $(N10 N10);

    S "SPACE" = ' ';

    S5 = $(S S S S S);

    S10 = $(S5 S5);

    S20 = $(S10 S10);

    EOL "END_OF_LINE" = "\r"? "\n" {
        $this->currentLineNr++;
    };

    EOR "END_OF_RECORD" = A* EOL;
}
